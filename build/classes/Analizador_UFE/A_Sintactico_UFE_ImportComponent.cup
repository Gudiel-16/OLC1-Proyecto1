/*----------------------AREA 1: CODIGO DE USUARIO-------------------------*/

//---------------> importaciones, paquetes
package Analizador_UFE;
import java_cup.runtime.Symbol;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import java.util.ArrayList;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.ImageIcon;
import javax.swing.Icon;
import javax.swing.border.Border;
import javax.swing.BorderFactory;
import java.awt.Color;
import java.util.HashMap;
import java.util.Stack;
import Analizador_UFE.analisis_sintactico_UFE_GuardarVariables;
import Analizador_UFE.analisis_sintactico_UFE_AsignacionVariables;
import Analizador_UFE.analisis_sintactico_UFE_AsignacionVariables2;
import Analizador_UFE.analisis_sintactico_UFE_AsignacionVariables3;
import Analizador_UFE.analisis_sintactico_UFE_ImportCSS;
import java.io.BufferedReader;
import java.io.StringReader;
import java.io.*;

//---------------> codigo para el parser, variables, metodos

parser code
{:  

    public static HashMap<String,Object> hmGuardarVariables= new HashMap<String,Object>();
    public static HashMap<String,Object[]> hmArreglos=new HashMap<String,Object[]>();
    public static ArrayList<Object> temporalLarr = new ArrayList<Object>();
    Stack<String> pila_erroresSemanticos = new Stack<String>();

    public static ArrayList<JPanel> misPaneles = new ArrayList<JPanel>();
    public static ArrayList<JLabel> componentesText = new ArrayList<JLabel>();
    public static ArrayList<JTextField> componentesTextfield = new ArrayList<JTextField>();
    public static ArrayList<JButton> componentesbutton = new ArrayList<JButton>();
    public static ArrayList<JComboBox> componentescombobox = new ArrayList<JComboBox>();
    public static ArrayList<JSpinner> componentesspinner = new ArrayList<JSpinner>();
    public static ArrayList<JLabel> componentesimage = new ArrayList<JLabel>();

    boolean banderaValArrVariable=false;

    public static HashMap<String,Object> hmComponentes= new HashMap<String,Object>();

    JPanel temporalP;

    public static ArrayList<Object> listCualquierComponent = new ArrayList<Object>();
    public static ArrayList<String> listCualquierComponentNameclass = new ArrayList<String>();

    public static String textoEntradaParaCSS="";
    boolean banderaIsComponentCSS=false;
    public static String textoEntradaParaCSSImportComponent="";

    String buscarArchivoImportarComponente(String ruta)
    {
        String bb="";
        String rutaBuscar=ruta.substring(1,ruta.length()-1);
        
        try {
            String aa; 
            FileReader f = new FileReader(rutaBuscar);
            BufferedReader bf = new BufferedReader(f);
            while ((aa = bf.readLine())!=null) {
                bb+=aa+"\n";                
             }
        } catch (Exception e) {
            System.out.println("eror buscar archivo"+e);
            String er="LA RUTA: " + ruta + " NO HA SIDO ENCONTRADA!";
            System.out.println(er);
        }
        return bb;
    }

    public void leerArchivo(String texto, String idArchivo)
    {
        try {
            //guardar variables
            ScanerUFE scanUFE=new ScanerUFE(new BufferedReader(new StringReader(texto)));
            analisis_sintactico_UFE_GuardarVariables parserGuardarVariables=new analisis_sintactico_UFE_GuardarVariables(scanUFE);
            //asignacionVariables 
            ScanerUFE scanUFE1=new ScanerUFE(new BufferedReader(new StringReader(texto)));
            analisis_sintactico_UFE_AsignacionVariables parserAsignacionVariables=new analisis_sintactico_UFE_AsignacionVariables(scanUFE1);
            //asignacionVariables2 
            ScanerUFE scanUFE2=new ScanerUFE(new BufferedReader(new StringReader(texto)));
            analisis_sintactico_UFE_AsignacionVariables2 parserAsignacionVariables2=new analisis_sintactico_UFE_AsignacionVariables2(scanUFE2);
            //asignacionVariables3 
            ScanerUFE scanUFE3=new ScanerUFE(new BufferedReader(new StringReader(texto)));
            analisis_sintactico_UFE_AsignacionVariables3 parserAsignacionVariables3=new analisis_sintactico_UFE_AsignacionVariables3(scanUFE3);
            //asignacionVariables2 segunda pasada 
            ScanerUFE scanUFE2n=new ScanerUFE(new BufferedReader(new StringReader(texto)));
            analisis_sintactico_UFE_AsignacionVariables2 parserAsignacionVariables2n=new analisis_sintactico_UFE_AsignacionVariables2(scanUFE2n);
            //import
            ScanerUFE scanUFE4=new ScanerUFE(new BufferedReader(new StringReader(texto)));
            analisis_sintactico_UFE_ImportComponent parserImport=new analisis_sintactico_UFE_ImportComponent(scanUFE4);

            parserGuardarVariables.hmGuardarVariables= (HashMap) hmGuardarVariables.clone();
            parserGuardarVariables.hmArreglos= (HashMap) hmArreglos.clone();            

            parserGuardarVariables.parse();

            //pasa las listas de guardarVariables para AsignacionVariables
            parserAsignacionVariables.hmGuardarVariables= (HashMap) parserGuardarVariables.hmGuardarVariables.clone();
            parserAsignacionVariables.hmArreglos= (HashMap) parserGuardarVariables.hmArreglos.clone();

            parserAsignacionVariables.parse();

            //pasa las listas de AsignacionVariables para AsignacionVariables2
            parserAsignacionVariables2.hmGuardarVariables= (HashMap) parserAsignacionVariables.hmGuardarVariables.clone();
            parserAsignacionVariables2.hmArreglos= (HashMap) parserAsignacionVariables.hmArreglos.clone();

            parserAsignacionVariables2.parse();

            //pasa las listas de AsignacionVariables2 para AsignacionVariables3
            parserAsignacionVariables3.hmGuardarVariables= (HashMap) parserAsignacionVariables2.hmGuardarVariables.clone();
            parserAsignacionVariables3.hmArreglos= (HashMap) parserAsignacionVariables2.hmArreglos.clone();

            parserAsignacionVariables3.parse();

            //pasa las listas de AsignacionVariables3 para AsignacionVariables2, segunda pasada
            parserAsignacionVariables2n.hmGuardarVariables= (HashMap) parserAsignacionVariables3.hmGuardarVariables.clone();
            parserAsignacionVariables2n.hmArreglos= (HashMap) parserAsignacionVariables3.hmArreglos.clone();

            parserAsignacionVariables2n.parse();
            
            //pasa las listas de AsignacionVariables3 para ImportComponent
            //hmGuardarVariables= (HashMap) parserAsignacionVariables2n.hmGuardarVariables.clone();
            //hmArreglos= (HashMap) parserAsignacionVariables2n.hmArreglos.clone();

            parserImport.hmGuardarVariables= (HashMap) parserAsignacionVariables2n.hmGuardarVariables.clone();
            parserImport.hmArreglos= (HashMap) parserAsignacionVariables2n.hmArreglos.clone();
            parserImport.banderaIsComponentCSS=true;
            parserImport.textoEntradaParaCSSImportComponent=texto;

            parserImport.parse();

            hmGuardarVariables= (HashMap) parserImport.hmGuardarVariables.clone();
            hmArreglos= (HashMap) parserImport.hmArreglos.clone();
            hmComponentes= (HashMap) parserImport.hmComponentes.clone();

            parserImport.banderaIsComponentCSS=false;
                       
        } catch (Exception e) {
            System.out.println("error funcion leer archivo"+e.getMessage());
        }
    }

    public void aplicarCSS()
    {
        try{
            ScanerUFE scanUFECSS=new ScanerUFE(new BufferedReader(new StringReader(textoEntradaParaCSS)));
            analisis_sintactico_UFE_ImportCSS parserImportCSS=new analisis_sintactico_UFE_ImportCSS(scanUFECSS);
            //le paso la lista de los componentes a editar
            parserImportCSS.listCualquierComponent=(ArrayList<Object>)listCualquierComponent.clone();
            parserImportCSS.listCualquierComponentNameclass=(ArrayList<String>)listCualquierComponentNameclass.clone();
            parserImportCSS.parse();
            //me regresa la lista de los componentes editados
            listCualquierComponent=(ArrayList<Object>)parserImportCSS.listCualquierComponent.clone();
            listCualquierComponentNameclass=(ArrayList<String>)parserImportCSS.listCualquierComponentNameclass.clone();

        } catch (Exception e) {
            System.out.println("error funcion leer archivo"+e.getMessage());
        }     
    }

    public void aplicarCSSImport()
    {
        try{
            ScanerUFE scanUFECSS=new ScanerUFE(new BufferedReader(new StringReader(textoEntradaParaCSSImportComponent)));
            analisis_sintactico_UFE_ImportCSS parserImportCSS=new analisis_sintactico_UFE_ImportCSS(scanUFECSS);
            //le paso la lista de los componentes a editar
            parserImportCSS.listCualquierComponent=(ArrayList<Object>)listCualquierComponent.clone();
            parserImportCSS.listCualquierComponentNameclass=(ArrayList<String>)listCualquierComponentNameclass.clone();
            parserImportCSS.parse();
            //me regresa la lista de los componentes editados
            listCualquierComponent=(ArrayList<Object>)parserImportCSS.listCualquierComponent.clone();
            listCualquierComponentNameclass=(ArrayList<String>)parserImportCSS.listCualquierComponentNameclass.clone();

        } catch (Exception e) {
            System.out.println("error funcion leer archivo"+e.getMessage());
        }     
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);     
    }
:}

//-------------> Codigo para las acciones gramaticales
action code
{:
:}

/*----------------------AREA 2: DECLARACIONES-------------------------*/

//--------------->declaracion de terminales
terminal parenabre, parencierra, igual, coma, puntoycoma, mas, menos, producto, division, potencia, menorque, mayorque, llaveabre, llavecierra, igualigual, diferenteigual, menorigual, mayorigual, andd, orr, xorr, nott, corchabre, corchcierra;
terminal String variab, booll, id, cadena, renderr, componentt, returnn;
terminal String iduf, equis, ye, heightt, widthh, colorr, borderr, classnamee, panell, textt, textfieldd, buttonn, onclickk, listt, elementss, itemm, defaultt, spinnerr, maxx, minn, imagee, srcc, hexad, nomcolor;
terminal String importt, fromm;
terminal String sii, sinoo, mientrass, repetirr, imprimirr;
terminal String intt;
terminal String doublee;
terminal String caracter;


//--------------->declaracion de no terminales
non terminal String INICIO;
non terminal String ALGEBRAICA, DECLARARVARIABLE, DECLARARVARIABLE2, RELACIONAL, RELACIONAL2, LOGICAS, ASIGNARVARIABLE, TIPASIGNARVARIABLE, ASIGNAARREGLO, LISTARREGLO;
non terminal String RENDER, COMPONENTE,TIPCOMPONENT2;
non terminal String DENTROCOMPONENTE, TIPCOMPONENT;
non terminal String IDC, EQUISC, YEC, WIDTHC, HEIGHTC, BORDERC, CLASSNAMEC, ONCLICKKK;
non terminal String IMPORTT;
non terminal Color COLORC;
non terminal JComboBox ITEMMS;
non terminal String MAXS, MINS;
non terminal String SRC;
non terminal String INSIF, INSELSEIFELSE, DENTROIF, DECVARIF;
non terminal String INSMIENTRAS, DENTROMIENTRAS, DECVARMIENTRAS;
non terminal String INSREPETIR, DENTROREPETIR, DECVARREPETIR;
non terminal String IMPRIMIR, IMPRIOP;
non terminal String IDARR;
non terminal String TEXTENCOMPONENTES;
non terminal String NEGATIVO;

precedence left mas, menos;
precedence left producto, division;
precedence right potencia;
precedence left orr;
precedence left andd;
precedence left xorr;
precedence nonassoc mayorque, menorque, mayorigual, menorigual, igualigual, diferenteigual;
precedence right nott;
precedence nonassoc corchabre, corchcierra;

start with INICIO;

INICIO::= RENDER INICIO
        | COMPONENTE INICIO
        | variab DECLARARVARIABLE puntoycoma INICIO
        | IMPORTT puntoycoma INICIO
        | ASIGNARVARIABLE puntoycoma INICIO
        | ASIGNAARREGLO puntoycoma INICIO
        | INSIF INICIO
        | INSREPETIR INICIO
        | INSMIENTRAS INICIO
        | IMPRIMIR puntoycoma INICIO
        | ;

DECLARARVARIABLE::= DECLARARVARIABLE:a coma id:b DECLARARVARIABLE2:c {::}
                 | id:a DECLARARVARIABLE2:b {::};

DECLARARVARIABLE2::= igual ALGEBRAICA:a {: RESULT=a; :}
                    | igual LOGICAS:a {: RESULT=a; :}
                    | corchabre intt:a corchcierra {::}
                    | igual llaveabre LISTARREGLO llavecierra {::} 
                    |;

RENDER::= renderr parenabre menorque id division mayorque coma id parencierra puntoycoma ; 

COMPONENTE::= componentt id:a parenabre parencierra llaveabre DENTROCOMPONENTE llavecierra {: hmComponentes.put(a,temporalP); :};

DENTROCOMPONENTE::= returnn parenabre TIPCOMPONENT parencierra puntoycoma DENTROCOMPONENTE
                | variab DECLARARVARIABLE puntoycoma DENTROCOMPONENTE
                | IMPORTT puntoycoma DENTROCOMPONENTE
                | ASIGNARVARIABLE puntoycoma DENTROCOMPONENTE
                | ASIGNAARREGLO puntoycoma DENTROCOMPONENTE
                | INSIF DENTROCOMPONENTE
                | INSREPETIR DENTROCOMPONENTE
                | INSMIENTRAS DENTROCOMPONENTE
                | IMPRIMIR puntoycoma DENTROCOMPONENTE
                |;
               
                 //empieza la estructura de un Panel (El que contendra todo)
TIPCOMPONENT::= menorque panell IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque TIPCOMPONENT2
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    JPanel nuevo=new JPanel(); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setLayout(null);
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    /*for (int i = 0; i < componentesText.size(); i++){ nuevo.add(componentesText.get(i)); } 
                    for (int i = 0; i < componentesTextfield.size(); i++){ nuevo.add(componentesTextfield.get(i)); } 
                    for (int i = 0; i < componentesbutton.size(); i++){ nuevo.add(componentesbutton.get(i)); } 
                    for (int i = 0; i < componentescombobox.size(); i++){ nuevo.add(componentescombobox.get(i)); }
                    for (int i = 0; i < componentesspinner.size(); i++){ nuevo.add(componentesspinner.get(i)); } 
                    for (int i = 0; i < componentesimage.size(); i++){ nuevo.add(componentesimage.get(i)); } */

                    if(banderaIsComponentCSS==true){aplicarCSSImport();}else{aplicarCSS();}                    

                    for (int m = 0; m < listCualquierComponent.size(); m++) 
                    {
                        try{
                                JPanel nuevoo=(JPanel)listCualquierComponent.get(m); 
                                nuevo.add(nuevoo);                                              
                                
                        }catch(Exception n){ /*System.out.println("error"+n);*/  }
                        try{
                                JLabel nuevoo=(JLabel)listCualquierComponent.get(m); 
                                nuevo.add(nuevoo);                       

                        }catch(Exception n){ /*System.out.println("error"+n);*/  }
                        try{
                                JTextField nuevoo=(JTextField)listCualquierComponent.get(m);
                                nuevo.add(nuevoo);
                                
                        }catch(Exception n){ /*System.out.println("error"+n);*/  }
                        try{
                                JButton nuevoo=(JButton)listCualquierComponent.get(m);                        
                                nuevo.add(nuevoo);

                        }catch(Exception n){ /*System.out.println("error"+n);*/  }
                        try{
                                JComboBox nuevoo=(JComboBox)listCualquierComponent.get(m);                        
                                nuevo.add(nuevoo);

                        }catch(Exception n){ /*System.out.println("error"+n);*/  }
                        try{
                                JSpinner nuevoo=(JSpinner)listCualquierComponent.get(m);                        
                                nuevo.add(nuevoo);

                        }catch(Exception n){ /*System.out.println("error"+n);*/  }                    
                    } 

                    misPaneles.add(nuevo);
                    /*componentesText.clear();
                    componentesTextfield.clear();
                    componentesbutton.clear();
                    componentescombobox.clear();
                    componentesspinner.clear();
                    componentesimage.clear();*/
                    listCualquierComponent.clear();
                    listCualquierComponentNameclass.clear();
                    if(h!=null){
                    //luego de limpiar las listas de componentes se agrega solo el panel
                    listCualquierComponent.add(nuevo);
                    listCualquierComponentNameclass.add(h);
                    //se hace de nuevo el aplicarCSS (solo estara el panel en la lista)
                    if(banderaIsComponentCSS==true){aplicarCSSImport();}else{aplicarCSS();} 
                    //extraigo el panel ya modificado .get(0) porque solo hay uno en la lista y es el panel
                    JPanel nuevooo=(JPanel)listCualquierComponent.get(0);
                    //limpiamos listas
                    listCualquierComponent.clear();
                    listCualquierComponentNameclass.clear();
                    temporalP=nuevooo;}
                    else{
                    temporalP=nuevo;
                    } :}

              | menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque division panell mayorque //por si no vienen mas panel adentro 
              | menorque textt IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque llaveabre id llavecierra menorque division textt mayorque
              | menorque textfieldd IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque llaveabre id llavecierra menorque division textfieldd mayorque
              | menorque listt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque menorque elementss mayorque ITEMMS:jcb menorque division elementss mayorque menorque defaultt mayorque intt:def menorque division defaultt mayorque menorque division listt mayorque  
              | menorque spinnerr IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g ONCLICKKK:h CLASSNAMEC:j MAXS:k MINS:l mayorque intt:i menorque division spinnerr mayorque 
              | menorque imagee IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h SRC:i mayorque
              | menorque division id mayorque ; 

TIPCOMPONENT2::= TIPCOMPONENT2 menorque division panell mayorque //para cerrar el panel principal

                | TIPCOMPONENT2 menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque division panell mayorque //termina con panel
                
                | TIPCOMPONENT2 menorque textt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque TEXTENCOMPONENTES:i menorque division textt mayorque //termina con text
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}                
                    JLabel nuevo=new JLabel(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    componentesText.add(nuevo);
                    


                    listCualquierComponent.add(nuevo);
                    listCualquierComponentNameclass.add(h); :} 

                | TIPCOMPONENT2 menorque textfieldd IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque TEXTENCOMPONENTES:i menorque division textfieldd mayorque
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";} 
                    JTextField nuevo=new JTextField(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    componentesTextfield.add(nuevo);
                    
                    listCualquierComponent.add(nuevo);
                    listCualquierComponentNameclass.add(h); :}

                | TIPCOMPONENT2 menorque buttonn IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g ONCLICKKK:h CLASSNAMEC:j mayorque TEXTENCOMPONENTES:i menorque division buttonn mayorque 
                {: if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    JButton nuevo=new JButton(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    nuevo.addActionListener(new ActionListener() { @Override
                    public void actionPerformed(java.awt.event.ActionEvent e) { JOptionPane.showMessageDialog(null, h); }});
                    componentesbutton.add(nuevo); 
                    
                    listCualquierComponent.add(nuevo);
                    listCualquierComponentNameclass.add(j); :}

                | TIPCOMPONENT2 menorque listt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque menorque elementss mayorque ITEMMS:jcb menorque division elementss mayorque menorque defaultt mayorque intt:def menorque division defaultt mayorque menorque division listt mayorque 
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    jcb.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); jcb.setSelectedIndex(Integer.parseInt(def)); 
                    jcb.setBackground(f);
                    jcb.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    jcb.setBorder(borderr);
                    componentescombobox.add(jcb); 
                    
                    listCualquierComponent.add(jcb);
                    listCualquierComponentNameclass.add(h); :}    

                | TIPCOMPONENT2 menorque spinnerr IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:j MAXS:k MINS:l mayorque intt:i menorque division spinnerr mayorque 
                {:  
                    if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(g==null){g="0";}
                    SpinnerModel sm = new SpinnerNumberModel(Integer.parseInt(i), Integer.parseInt(l), Integer.parseInt(k), 1);
                   JSpinner spi=new JSpinner(sm);
                   spi.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d));
                   Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    spi.setBorder(borderr);
                   componentesspinner.add(spi); 
                   
                   listCualquierComponent.add(spi);
                    listCualquierComponentNameclass.add(j);  :}

                | TIPCOMPONENT2 menorque imagee IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h SRC:i mayorque 
                {:  i=i.substring(1,i.length()-1);
                    JLabel jlimg=new JLabel();        
                    jlimg.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d));
                    ImageIcon imgi=new ImageIcon(i);
                    Icon icono=new ImageIcon(imgi.getImage().getScaledInstance(jlimg.getWidth(), jlimg.getHeight(), 0));
                    jlimg.setIcon(icono);
                    componentesimage.add(jlimg);
                    
                    listCualquierComponent.add(jlimg);
                    listCualquierComponentNameclass.add(h); :}

                | TIPCOMPONENT2 menorque division id mayorque

                | menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque division panell mayorque //empezara con un panel
                
                //text (jlabel)
                | menorque textt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque TEXTENCOMPONENTES:i menorque division textt mayorque
                    {: if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}                
                    JLabel nuevo=new JLabel(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    componentesText.add(nuevo); 
                    
                    listCualquierComponent.add(nuevo);
                    listCualquierComponentNameclass.add(h);:} 
                
                //textfield
                | menorque textfieldd IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque TEXTENCOMPONENTES:i menorque division textfieldd mayorque 
                {: if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";} 
                    JTextField nuevo=new JTextField(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    componentesTextfield.add(nuevo); 
                    
                    listCualquierComponent.add(nuevo);
                    listCualquierComponentNameclass.add(h);:}

                | menorque buttonn IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g ONCLICKKK:h CLASSNAMEC:j mayorque TEXTENCOMPONENTES:i menorque division buttonn mayorque  
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    JButton nuevo=new JButton(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    nuevo.addActionListener(new ActionListener() { @Override
                    public void actionPerformed(java.awt.event.ActionEvent e) { JOptionPane.showMessageDialog(null, h); }});
                    componentesbutton.add(nuevo); 
                    
                    listCualquierComponent.add(nuevo);
                    listCualquierComponentNameclass.add(j);:} 

                | menorque listt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque menorque elementss mayorque ITEMMS:jcb menorque division elementss mayorque menorque defaultt mayorque intt:def menorque division defaultt mayorque menorque division listt mayorque 
                {: if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    jcb.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); jcb.setSelectedIndex(Integer.parseInt(def)); 
                    jcb.setBackground(f);
                    jcb.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    jcb.setBorder(borderr);
                    componentescombobox.add(jcb);  
                    
                    listCualquierComponent.add(jcb);
                    listCualquierComponentNameclass.add(h); :} 

                | menorque spinnerr IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:j MAXS:k MINS:l mayorque intt:i menorque division spinnerr mayorque 
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(g==null){g="0";}
                    SpinnerModel sm = new SpinnerNumberModel(Integer.parseInt(i), Integer.parseInt(l), Integer.parseInt(k), 1);
                   JSpinner spi=new JSpinner(sm);
                   spi.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d));
                   Border borderr = BorderFactory.createLineBorder(Color.black, 5); 
                    spi.setBorder(borderr);
                   componentesspinner.add(spi); 
                   
                   listCualquierComponent.add(spi);
                    listCualquierComponentNameclass.add(j);   :}

                | menorque imagee IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h SRC:i mayorque 
                {:                 
                     i=i.substring(1,i.length()-1);
                    JLabel jlimg=new JLabel();     
                    jlimg.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d));
                    ImageIcon imgi=new ImageIcon(i);
                    Icon icono=new ImageIcon(imgi.getImage().getScaledInstance(jlimg.getWidth(), jlimg.getHeight(), 0));
                    jlimg.setIcon(icono);
                    componentesimage.add(jlimg); 
                    
                    listCualquierComponent.add(jlimg);
                    listCualquierComponentNameclass.add(h); :}  
                    
                | menorque division id mayorque;
                
 
ITEMMS::= ITEMMS:jcb menorque itemm mayorque TEXTENCOMPONENTES:a menorque division itemm mayorque
         {: jcb.addItem(a); RESULT=jcb; :}
        | menorque itemm mayorque TEXTENCOMPONENTES:a menorque division itemm mayorque
        {: JComboBox nuevo= new JComboBox(); nuevo.addItem(a); RESULT=nuevo; :};

IDC::= iduf igual id
       | ;

EQUISC::= equis igual intt:a {: RESULT=a; :}
       | ;

YEC::= ye igual intt:a {: RESULT=a; :}
       | ;

WIDTHC::= widthh igual intt:a {: RESULT=a; :}
        | ;

HEIGHTC::= heightt igual intt:a {: RESULT=a; :}
        | ;

COLORC::= colorr igual nomcolor:a {: if(a.substring(1,a.length()-1).toLowerCase().equals("red")){ Color c=Color.RED; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("pink")){ Color c=Color.PINK; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("orange")){ Color c=Color.ORANGE; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("yellow")){ Color c=Color.yellow; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("purple")){ Color c=Color.magenta;  RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("magenta")){ Color c=Color.MAGENTA; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("green")){ Color c=Color.GREEN; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("blue")){ Color c=Color.BLUE; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("brown")){ Color c=Color.yellow; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("white")){ Color c=Color.white; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("gray")){ Color c=Color.gray; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("black")){ Color c=Color.BLACK; RESULT=c; } :}
        | colorr igual hexad:a {: Color c= Color.decode(a); RESULT=c; :}
        | ;

BORDERC::= borderr igual intt:a {: RESULT=a; :}
        | ;

CLASSNAMEC::= classnamee igual cadena:a {: String op= a.substring(1,a.length()-1); RESULT=op; :}
        | ;

ONCLICKKK::= onclickk igual TEXTENCOMPONENTES:a {: RESULT=a;  :}
        | ;

MAXS::= maxx igual intt:a  {: RESULT=a;  :}
        | ;

MINS::= minn igual intt:a  {: RESULT=a;  :}
        | ;

SRC::= srcc igual cadena:a {: RESULT=a; :} ;

IMPORTT::= importt cadena
        | importt id:a fromm cadena:b {: String datos=buscarArchivoImportarComponente(b); leerArchivo(datos, a); :} ;

TEXTENCOMPONENTES::= llaveabre ALGEBRAICA:a llavecierra {: RESULT=a; :} 
                | id:a {: RESULT=a; :} ;

//INSTRUCCION IF
INSIF::= sii parenabre LOGICAS parencierra llaveabre DENTROIF llavecierra INSELSEIFELSE;

INSELSEIFELSE::= sinoo sii parenabre LOGICAS parencierra llaveabre DENTROIF llavecierra INSELSEIFELSE
                | sinoo llaveabre DENTROIF llavecierra INSELSEIFELSE
                |;

DENTROIF::= variab DECVARIF puntoycoma
            | ;

DECVARIF::= DECVARIF igual LOGICAS
            | DECVARIF igual ALGEBRAICA
            | DECVARIF corchabre intt corchcierra 
            | DECVARIF igual llaveabre LISTARREGLO llavecierra 
            | DECVARIF coma id
            | id;

//INSTRUCCION REPETIR
INSREPETIR::= repetirr parenabre ALGEBRAICA parencierra llaveabre DENTROREPETIR llavecierra;

DENTROREPETIR::= DENTROREPETIR:d variab:a DECVARREPETIR:b puntoycoma:c 
                | DENTROREPETIR ASIGNARVARIABLE puntoycoma 
                | DENTROREPETIR ASIGNAARREGLO puntoycoma 
                | DENTROREPETIR INSIF 
                | DENTROREPETIR:a INSREPETIR:b 
                | DENTROREPETIR INSMIENTRAS 
                | DENTROREPETIR:a IMPRIMIR:b puntoycoma:c 
                | variab:a DECVARREPETIR:b puntoycoma:c
                | ASIGNARVARIABLE:a puntoycoma:b 
                | ASIGNAARREGLO:a puntoycoma:b 
                | INSIF 
                | INSREPETIR:a 
                | INSMIENTRAS 
                | IMPRIMIR:a puntoycoma:b  ;

DECVARREPETIR::= DECVARREPETIR igual LOGICAS
            | DECVARREPETIR igual ALGEBRAICA
            | DECVARREPETIR corchabre intt corchcierra 
            | DECVARREPETIR igual llaveabre LISTARREGLO llavecierra 
            | DECVARREPETIR coma id
            | id;


//INSTRUCCION MIENTRAS
INSMIENTRAS::= mientrass parenabre LOGICAS parencierra llaveabre DENTROMIENTRAS llavecierra;

DENTROMIENTRAS::= variab DECVARMIENTRAS puntoycoma
                | ;

DECVARMIENTRAS::= DECVARMIENTRAS igual LOGICAS
            | DECVARMIENTRAS igual ALGEBRAICA
            | DECVARMIENTRAS corchabre intt corchcierra //para arreglo
            | DECVARMIENTRAS igual llaveabre LISTARREGLO llavecierra //lista de arreglos
            | DECVARMIENTRAS coma id
            | id;

//PARA LISTA DE ARREGLOS
LISTARREGLO::= LISTARREGLO coma ALGEBRAICA {::}
            | ALGEBRAICA {::};

//ASIGNAR VALOR A VARIABLE
ASIGNARVARIABLE::= id:a igual TIPASIGNARVARIABLE:b
                {::};

//ASIGNAR VALOR A UN ARREGLO
ASIGNAARREGLO::= id:a corchabre ALGEBRAICA:b corchcierra igual TIPASIGNARVARIABLE:c
                {::};

TIPASIGNARVARIABLE::= ALGEBRAICA:a {: RESULT=a; :}
                    | LOGICAS:a {: RESULT=a; :};

//IMPRIMIR
IMPRIMIR::= imprimirr parenabre IMPRIOP parencierra;

IMPRIOP::= ALGEBRAICA
        | LOGICAS;

LOGICAS::= LOGICAS:a andd LOGICAS:b {: if(a.equals("true")&&b.equals("true")){ RESULT="true"; } else if(a.equals("true")&&b.equals("false")){ RESULT="true"; } else if(a.equals("false")&&b.equals("true")){ RESULT="false"; } else if(a.equals("false")&&b.equals("false")){ RESULT="false"; }  :}
        | LOGICAS:a orr LOGICAS:b {: if(a.equals("true")&&b.equals("true")){ RESULT="false"; } else if(a.equals("true")&&b.equals("false")){ RESULT="true"; } else if(a.equals("false")&&b.equals("true")){ RESULT="true"; } else if(a.equals("false")&&b.equals("false")){ RESULT="false"; }  :}
        | LOGICAS:a xorr LOGICAS:b {: if(a.equals("true")&&b.equals("true")){ RESULT="false"; } else if(a.equals("true")&&b.equals("false")){ RESULT="true"; } else if(a.equals("false")&&b.equals("true")){ RESULT="true"; } else if(a.equals("false")&&b.equals("false")){ RESULT="true"; }  :}
        | LOGICAS:a nott LOGICAS:b {: if(a.equals("true")&&b.equals("true")){ RESULT="false"; } else if(a.equals("true")&&b.equals("false")){ RESULT="false"; } else if(a.equals("false")&&b.equals("true")){ RESULT="false"; } else if(a.equals("false")&&b.equals("false")){ RESULT="true"; }  :}
        | parenabre LOGICAS:a parencierra {: RESULT=a; :}
        | RELACIONAL:a {: RESULT=a; :};

RELACIONAL::=RELACIONAL2:a igualigual RELACIONAL2:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(Double.compare(aux,auxx)==0){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " == " + b;
                    pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " == " + b;
                    pila_erroresSemanticos.push(ca);
                }else{
                    if(a.equals(b)){RESULT="true";}else{RESULT="false";}
                } :}
            | RELACIONAL2:a diferenteigual RELACIONAL2:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux!=auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " != " + b;
                    pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " != " + b;
                    pila_erroresSemanticos.push(ca);
                }else{
                    if(!a.equals(b)){RESULT="true";}else{RESULT="false";}
                } :} 
            | RELACIONAL2:a mayorque RELACIONAL2:b 
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux>auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " > " + b;
                    pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " > " + b;
                    pila_erroresSemanticos.push(ca);
                }else{
                    String ca="No se puede hacer esta comparacion: " + a + " > " + b;
                    pila_erroresSemanticos.push(ca);
                } :}
            | RELACIONAL2:a menorque RELACIONAL2:b 
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux<auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " < " + b;
                    pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " < " + b;
                    pila_erroresSemanticos.push(ca);
                }else{
                    String ca="No se puede hacer esta comparacion: " + a + " < " + b;
                    pila_erroresSemanticos.push(ca);
                } :}
            | RELACIONAL2:a mayorigual RELACIONAL2:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux>=auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " >= " + b;
                    pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " >= " + b;
                    pila_erroresSemanticos.push(ca);
                }else{
                    String ca="No se puede hacer esta comparacion: " + a + " >= " + b;
                    pila_erroresSemanticos.push(ca);
                } :}
            | RELACIONAL2:a menorigual RELACIONAL2:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux<=auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " <= " + b;
                    pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " <= " + b;
                    pila_erroresSemanticos.push(ca);
                }else{
                    String ca="No se puede hacer esta comparacion: " + a + " <= " + b;
                    pila_erroresSemanticos.push(ca);
                } :};

RELACIONAL2::= NEGATIVO:b intt:a {: if(b==null){ RESULT=a; }else{ String val=b+a; RESULT=val; } :}
            | cadena:a {: String op= a.substring(1,a.length()-1); RESULT=op; :}
            | NEGATIVO:b doublee:a {: if(b==null){ RESULT=a; }else{ String val=b+a; RESULT=val; } :}
            | caracter:a {: char b=a.charAt(1); int op=(int)(b); RESULT=String.valueOf(op); :} ;



ALGEBRAICA::= ALGEBRAICA:a mas ALGEBRAICA:b

            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==false || bande2==false){ //quiere decir que uno de los dos es string entonces se concatena
                    String op1= a + b;
                    RESULT=op1;
                }else{
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1+op2;
                    RESULT=String.valueOf(op3);
                } :}    

            | ALGEBRAICA:a menos ALGEBRAICA:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1-op2;
                    RESULT=String.valueOf(op3);
                }else{
                    String ca="No se puede hacer esta resta: " + a + " - " + b;
                    pila_erroresSemanticos.push(ca);
                    RESULT="0";
                } :} 

            | ALGEBRAICA:a producto ALGEBRAICA:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1*op2;
                    RESULT=String.valueOf(op3);
                }else{
                    String ca="No se puede hacer este producto: " + a + " * " + b;
                    pila_erroresSemanticos.push(ca);
                    RESULT="0";
                } :} 

            | ALGEBRAICA:a division ALGEBRAICA:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1/op2;
                    RESULT=String.valueOf(op3);
                }else{
                    String ca="No se puede hacer esta division: " + a + " / " + b;
                    pila_erroresSemanticos.push(ca);
                    RESULT="0";
                } :} 

            | ALGEBRAICA:a potencia ALGEBRAICA:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=Math.pow(op1, op2);
                    RESULT=String.valueOf(op3);
                }else{
                    String ca="No se puede hacer esta potencia: " + a + " pow " + b;
                    pila_erroresSemanticos.push(ca);
                    RESULT="0";
                } :} 

            | parenabre ALGEBRAICA:a parencierra
              {: RESULT=a; :}
            | cadena:a
              {: String op= a.substring(1,a.length()-1); RESULT=op; :} //para quitar comillas
            | NEGATIVO:b intt:a
              {: if(b==null){ RESULT=a; }else{ String val=b+a; RESULT=val; } :}
            | NEGATIVO:b doublee:a
              {: if(b==null){ RESULT=a; }else{ String val=b+a; RESULT=val; } :}
            | caracter:a
              {: char b=a.charAt(1); int op=(int)(b); RESULT=String.valueOf(op); :}
            | booll:a
              {: RESULT=a; :}
            | IDARR:a
              {: if(banderaValArrVariable==false){
                        if(hmGuardarVariables.containsKey(a.toString()))
                        {
                        String val=hmGuardarVariables.get(a).toString();                
                        RESULT=val;
                        }
              }else{
                  banderaValArrVariable=false;
                  RESULT=a;
              } :};

NEGATIVO::=menos:a {: RESULT=a.toString(); :}
        | ;

IDARR::= IDARR:a corchabre ALGEBRAICA:b corchcierra 
        {: if(hmArreglos.containsKey(a.toString()))
            {
                Object arreg[]=hmArreglos.get(a);
                Integer num=Integer.parseInt(b);
                Object valorr=arreg[num];
                banderaValArrVariable=true;
                RESULT=valorr.toString();
            }else
            {  
                String exis="LA VARIABLE " + a.toString() + " NO EXISTE" ;
                pila_erroresSemanticos.push(exis);
                RESULT="0";
            } :}
        | id:a 
        {: RESULT=a; :} ;
