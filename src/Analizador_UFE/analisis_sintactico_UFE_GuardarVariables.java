
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador_UFE;

import java_cup.runtime.Symbol;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import java.util.ArrayList;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.ImageIcon;
import javax.swing.Icon;
import javax.swing.border.Border;
import javax.swing.BorderFactory;
import java.awt.Color;
import java.util.HashMap;
import java.util.Stack;
import javax.swing.table.DefaultTableModel;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico_UFE_GuardarVariables extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosUFE.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico_UFE_GuardarVariables() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico_UFE_GuardarVariables(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico_UFE_GuardarVariables(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\251\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\006\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\005\000\002\002\002\000\002" +
    "\004\006\000\002\004\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\006\000\002\005\002" +
    "\000\002\015\014\000\002\016\011\000\002\031\010\000" +
    "\002\031\006\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\005\000\002\031\002\000\002\017\016" +
    "\000\002\017\021\000\002\017\024\000\002\017\024\000" +
    "\002\017\041\000\002\017\025\000\002\017\016\000\002" +
    "\017\006\000\002\020\007\000\002\020\022\000\002\020" +
    "\023\000\002\020\023\000\002\020\024\000\002\020\042" +
    "\000\002\020\025\000\002\020\017\000\002\020\007\000" +
    "\002\020\021\000\002\020\022\000\002\020\022\000\002" +
    "\020\023\000\002\020\041\000\002\020\024\000\002\020" +
    "\016\000\002\020\006\000\002\034\013\000\002\034\012" +
    "\000\002\021\005\000\002\021\002\000\002\022\005\000" +
    "\002\022\002\000\002\023\005\000\002\023\002\000\002" +
    "\024\005\000\002\024\002\000\002\025\005\000\002\025" +
    "\002\000\002\033\005\000\002\033\005\000\002\033\002" +
    "\000\002\026\005\000\002\026\002\000\002\027\005\000" +
    "\002\027\002\000\002\030\005\000\002\030\002\000\002" +
    "\035\005\000\002\035\002\000\002\036\005\000\002\036" +
    "\002\000\002\037\005\000\002\032\004\000\002\032\006" +
    "\000\002\055\005\000\002\055\003\000\002\040\012\000" +
    "\002\041\013\000\002\041\007\000\002\041\002\000\002" +
    "\042\005\000\002\042\002\000\002\043\005\000\002\043" +
    "\005\000\002\043\006\000\002\043\007\000\002\043\005" +
    "\000\002\043\003\000\002\047\011\000\002\050\006\000" +
    "\002\050\005\000\002\050\005\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\005\000\002\050" +
    "\005\000\002\050\004\000\002\050\004\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\004\000" +
    "\002\051\005\000\002\051\005\000\002\051\006\000\002" +
    "\051\007\000\002\051\005\000\002\051\003\000\002\044" +
    "\011\000\002\045\005\000\002\045\002\000\002\046\005" +
    "\000\002\046\005\000\002\046\006\000\002\046\007\000" +
    "\002\046\005\000\002\046\003\000\002\014\005\000\002" +
    "\014\003\000\002\011\005\000\002\013\010\000\002\012" +
    "\003\000\002\012\003\000\002\052\006\000\002\053\003" +
    "\000\002\053\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\007\004\000\002\007\003\000\002\007\004\000" +
    "\002\007\003\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\056\003\000\002\056\002\000\002\054\006\000\002" +
    "\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02ae\000\026\002\ufff6\034\012\036\021\040\016\041" +
    "\017\073\022\075\005\077\010\100\007\101\006\001\002" +
    "\000\026\002\ufff6\034\012\036\021\040\016\041\017\073" +
    "\022\075\005\077\010\100\007\101\006\001\002\000\004" +
    "\004\u028d\001\002\000\004\004\u0288\001\002\000\004\004" +
    "\u025e\001\002\000\004\004\u0249\001\002\000\004\010\u0247" +
    "\001\002\000\004\036\u021b\001\002\000\026\002\ufff6\034" +
    "\012\036\021\040\016\041\017\073\022\075\005\077\010" +
    "\100\007\101\006\001\002\000\004\010\u0241\001\002\000" +
    "\026\002\ufff6\034\012\036\021\040\016\041\017\073\022" +
    "\075\005\077\010\100\007\101\006\001\002\000\004\004" +
    "\u0237\001\002\000\004\036\150\001\002\000\026\002\ufff6" +
    "\034\012\036\021\040\016\041\017\073\022\075\005\077" +
    "\010\100\007\101\006\001\002\000\006\006\041\032\042" +
    "\001\002\000\006\036\036\037\035\001\002\000\004\010" +
    "\033\001\002\000\004\010\031\001\002\000\026\002\ufff6" +
    "\034\012\036\021\040\016\041\017\073\022\075\005\077" +
    "\010\100\007\101\006\001\002\000\004\002\027\001\002" +
    "\000\004\002\001\001\002\000\004\002\ufffa\001\002\000" +
    "\026\002\ufff6\034\012\036\021\040\016\041\017\073\022" +
    "\075\005\077\010\100\007\101\006\001\002\000\004\002" +
    "\ufffd\001\002\000\026\002\ufff6\034\012\036\021\040\016" +
    "\041\017\073\022\075\005\077\010\100\007\101\006\001" +
    "\002\000\004\002\ufffb\001\002\000\004\010\uffaf\001\002" +
    "\000\004\074\037\001\002\000\004\037\040\001\002\000" +
    "\004\010\uffae\001\002\000\022\004\075\012\051\035\050" +
    "\036\044\037\077\102\uff5b\103\uff5b\104\100\001\002\000" +
    "\022\004\045\012\051\035\050\036\044\037\047\102\uff5b" +
    "\103\uff5b\104\052\001\002\000\006\102\145\103\144\001" +
    "\002\000\032\005\uff59\006\uff59\007\uff59\010\uff59\011\uff59" +
    "\012\uff59\013\uff59\014\uff59\015\uff59\021\uff59\032\uff59\033" +
    "\uff59\001\002\000\022\004\045\012\051\035\050\036\044" +
    "\037\047\102\uff5b\103\uff5b\104\052\001\002\000\016\011" +
    "\057\012\060\013\056\014\063\015\062\033\071\001\002" +
    "\000\032\005\uff62\006\uff62\007\uff62\010\uff62\011\uff62\012" +
    "\uff62\013\uff62\014\uff62\015\uff62\021\uff62\032\uff62\033\uff62" +
    "\001\002\000\032\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011" +
    "\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e\021\uff5e\032\uff5e" +
    "\033\uff5e\001\002\000\006\102\uff5c\103\uff5c\001\002\000" +
    "\032\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012\uff5f" +
    "\013\uff5f\014\uff5f\015\uff5f\021\uff5f\032\uff5f\033\uff5f\001" +
    "\002\000\032\005\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d" +
    "\012\uff5d\013\uff5d\014\uff5d\015\uff5d\021\uff5d\032\054\033" +
    "\uff5d\001\002\000\022\004\045\012\051\035\050\036\044" +
    "\037\047\102\uff5b\103\uff5b\104\052\001\002\000\016\011" +
    "\057\012\060\013\056\014\063\015\062\033\061\001\002" +
    "\000\022\004\045\012\051\035\050\036\044\037\047\102" +
    "\uff5b\103\uff5b\104\052\001\002\000\022\004\045\012\051" +
    "\035\050\036\044\037\047\102\uff5b\103\uff5b\104\052\001" +
    "\002\000\022\004\045\012\051\035\050\036\044\037\047" +
    "\102\uff5b\103\uff5b\104\052\001\002\000\032\005\uff5a\006" +
    "\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014\uff5a" +
    "\015\uff5a\021\uff5a\032\uff5a\033\uff5a\001\002\000\022\004" +
    "\045\012\051\035\050\036\044\037\047\102\uff5b\103\uff5b" +
    "\104\052\001\002\000\022\004\045\012\051\035\050\036" +
    "\044\037\047\102\uff5b\103\uff5b\104\052\001\002\000\032" +
    "\005\uff65\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013" +
    "\uff65\014\uff65\015\062\021\uff65\032\uff65\033\uff65\001\002" +
    "\000\032\005\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012" +
    "\uff64\013\uff64\014\uff64\015\062\021\uff64\032\uff64\033\uff64" +
    "\001\002\000\032\005\uff67\006\uff67\007\uff67\010\uff67\011" +
    "\uff67\012\uff67\013\056\014\063\015\062\021\uff67\032\uff67" +
    "\033\uff67\001\002\000\032\005\uff68\006\uff68\007\uff68\010" +
    "\uff68\011\uff68\012\uff68\013\056\014\063\015\062\021\uff68" +
    "\032\uff68\033\uff68\001\002\000\032\005\uff66\006\uff66\007" +
    "\uff66\010\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\062" +
    "\021\uff66\032\uff66\033\uff66\001\002\000\004\006\072\001" +
    "\002\000\022\004\075\012\051\035\050\036\044\037\077" +
    "\102\uff5b\103\uff5b\104\100\001\002\000\006\102\143\103" +
    "\142\001\002\000\016\016\130\017\133\022\126\023\127" +
    "\024\132\025\131\001\002\000\022\004\075\012\051\035" +
    "\050\036\044\037\077\102\uff5b\103\uff5b\104\100\001\002" +
    "\000\016\010\uff7d\011\057\012\060\013\056\014\063\015" +
    "\062\001\002\000\042\005\uff62\006\uff62\007\uff62\010\uff62" +
    "\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62\016\uff6b\017" +
    "\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\032\uff62\001\002" +
    "\000\042\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012" +
    "\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff69\017\uff69\022\uff69" +
    "\023\uff69\024\uff69\025\uff69\032\uff5f\001\002\000\014\010" +
    "\uff7c\026\106\027\107\030\105\031\104\001\002\000\004" +
    "\010\uff7e\001\002\000\024\005\uff73\006\uff73\007\uff73\010" +
    "\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\001\002" +
    "\000\016\004\113\012\051\037\112\102\uff5b\103\uff5b\104" +
    "\114\001\002\000\016\004\113\012\051\037\112\102\uff5b" +
    "\103\uff5b\104\114\001\002\000\016\004\113\012\051\037" +
    "\112\102\uff5b\103\uff5b\104\114\001\002\000\016\004\113" +
    "\012\051\037\112\102\uff5b\103\uff5b\104\114\001\002\000" +
    "\006\102\120\103\117\001\002\000\024\005\uff77\006\uff77" +
    "\007\uff77\010\uff77\026\106\027\uff77\030\105\031\104\032" +
    "\uff77\001\002\000\040\005\uff6b\006\uff6b\007\uff6b\010\uff6b" +
    "\016\uff6b\017\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026" +
    "\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\001\002\000\016" +
    "\004\113\012\051\037\112\102\uff5b\103\uff5b\104\114\001" +
    "\002\000\040\005\uff69\006\uff69\007\uff69\010\uff69\016\uff69" +
    "\017\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027" +
    "\uff69\030\uff69\031\uff69\032\uff69\001\002\000\014\005\116" +
    "\026\106\027\107\030\105\031\104\001\002\000\024\005" +
    "\uff74\006\uff74\007\uff74\010\uff74\026\uff74\027\uff74\030\uff74" +
    "\031\uff74\032\uff74\001\002\000\040\005\uff6a\006\uff6a\007" +
    "\uff6a\010\uff6a\016\uff6a\017\uff6a\022\uff6a\023\uff6a\024\uff6a" +
    "\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\001" +
    "\002\000\040\005\uff6c\006\uff6c\007\uff6c\010\uff6c\016\uff6c" +
    "\017\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027" +
    "\uff6c\030\uff6c\031\uff6c\032\uff6c\001\002\000\024\005\uff78" +
    "\006\uff78\007\uff78\010\uff78\026\uff78\027\uff78\030\105\031" +
    "\104\032\uff78\001\002\000\024\005\uff76\006\uff76\007\uff76" +
    "\010\uff76\026\uff76\027\uff76\030\uff76\031\104\032\uff76\001" +
    "\002\000\024\005\uff75\006\uff75\007\uff75\010\uff75\026\uff75" +
    "\027\uff75\030\uff75\031\104\032\uff75\001\002\000\016\005" +
    "\125\011\057\012\060\013\056\014\063\015\062\001\002" +
    "\000\032\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63\012" +
    "\uff63\013\uff63\014\uff63\015\uff63\021\uff63\032\uff63\033\uff63" +
    "\001\002\000\014\012\051\037\112\102\uff5b\103\uff5b\104" +
    "\114\001\002\000\014\012\051\037\112\102\uff5b\103\uff5b" +
    "\104\114\001\002\000\014\012\051\037\112\102\uff5b\103" +
    "\uff5b\104\114\001\002\000\014\012\051\037\112\102\uff5b" +
    "\103\uff5b\104\114\001\002\000\014\012\051\037\112\102" +
    "\uff5b\103\uff5b\104\114\001\002\000\014\012\051\037\112" +
    "\102\uff5b\103\uff5b\104\114\001\002\000\024\005\uff70\006" +
    "\uff70\007\uff70\010\uff70\026\uff70\027\uff70\030\uff70\031\uff70" +
    "\032\uff70\001\002\000\024\005\uff6d\006\uff6d\007\uff6d\010" +
    "\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\001\002" +
    "\000\024\005\uff6e\006\uff6e\007\uff6e\010\uff6e\026\uff6e\027" +
    "\uff6e\030\uff6e\031\uff6e\032\uff6e\001\002\000\024\005\uff6f" +
    "\006\uff6f\007\uff6f\010\uff6f\026\uff6f\027\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\001\002\000\024\005\uff71\006\uff71\007\uff71" +
    "\010\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\001" +
    "\002\000\024\005\uff72\006\uff72\007\uff72\010\uff72\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\001\002\000\042\005" +
    "\uff60\006\uff60\007\uff60\010\uff60\011\uff60\012\uff60\013\uff60" +
    "\014\uff60\015\uff60\016\uff6a\017\uff6a\022\uff6a\023\uff6a\024" +
    "\uff6a\025\uff6a\032\uff60\001\002\000\042\005\uff61\006\uff61" +
    "\007\uff61\010\uff61\011\uff61\012\uff61\013\uff61\014\uff61\015" +
    "\uff61\016\uff6c\017\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c" +
    "\032\uff61\001\002\000\032\005\uff60\006\uff60\007\uff60\010" +
    "\uff60\011\uff60\012\uff60\013\uff60\014\uff60\015\uff60\021\uff60" +
    "\032\uff60\033\uff60\001\002\000\032\005\uff61\006\uff61\007" +
    "\uff61\010\uff61\011\uff61\012\uff61\013\uff61\014\uff61\015\uff61" +
    "\021\uff61\032\uff61\033\uff61\001\002\000\004\010\uff7f\001" +
    "\002\000\004\002\ufff9\001\002\000\004\004\151\001\002" +
    "\000\004\005\152\001\002\000\004\020\153\001\002\000" +
    "\024\021\uffe3\034\162\036\021\042\165\073\022\075\005" +
    "\077\010\100\007\101\006\001\002\000\004\021\u0236\001" +
    "\002\000\004\010\u0234\001\002\000\004\010\u0232\001\002" +
    "\000\004\010\u0230\001\002\000\024\021\uffe3\034\162\036" +
    "\021\042\165\073\022\075\005\077\010\100\007\101\006" +
    "\001\002\000\024\021\uffe3\034\162\036\021\042\165\073" +
    "\022\075\005\077\010\100\007\101\006\001\002\000\004" +
    "\036\u021b\001\002\000\004\010\u0218\001\002\000\024\021" +
    "\uffe3\034\162\036\021\042\165\073\022\075\005\077\010" +
    "\100\007\101\006\001\002\000\004\004\166\001\002\000" +
    "\004\016\170\001\002\000\004\005\u0214\001\002\000\020" +
    "\014\177\053\175\054\174\055\173\060\176\064\171\067" +
    "\172\001\002\000\032\017\uffc6\043\203\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\057\uffc6\065" +
    "\uffc6\066\uffc6\001\002\000\024\043\203\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\070\uffc6\001" +
    "\002\000\024\017\uffc6\043\203\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\001\002\000\024\017" +
    "\uffc6\043\203\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\001\002\000\024\017\uffc6\043\203\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\001\002\000\024\017\uffc6\043\203\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\001\002\000\004" +
    "\036\200\001\002\000\004\017\201\001\002\000\004\005" +
    "\uffdb\001\002\000\022\017\uffc4\044\207\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\004\006" +
    "\204\001\002\000\004\036\205\001\002\000\032\017\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\057\uffc7\065\uffc7\066\uffc7\070\uffc7\001\002\000\020" +
    "\017\uffc2\045\213\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\001\002\000\004\006\210\001\002\000\004\102\211" +
    "\001\002\000\030\017\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\057\uffc5\065\uffc5\066\uffc5\070\uffc5" +
    "\001\002\000\016\017\uffbe\046\216\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\001\002\000\004\006\214\001\002\000\004" +
    "\102\215\001\002\000\026\017\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\057\uffc3\065\uffc3\066\uffc3\070\uffc3" +
    "\001\002\000\004\006\311\001\002\000\014\017\uffc0\047" +
    "\220\050\uffc0\051\uffc0\052\uffc0\001\002\000\004\006\307" +
    "\001\002\000\012\017\uffbb\050\222\051\uffbb\052\uffbb\001" +
    "\002\000\004\006\304\001\002\000\010\017\uffb9\051\225" +
    "\052\uffb9\001\002\000\006\017\uffb7\052\231\001\002\000" +
    "\004\006\226\001\002\000\004\102\227\001\002\000\016" +
    "\017\uffba\052\uffba\057\uffba\065\uffba\066\uffba\070\uffba\001" +
    "\002\000\004\017\234\001\002\000\004\006\232\001\002" +
    "\000\004\037\233\001\002\000\012\017\uffb8\065\uffb8\066" +
    "\uffb8\070\uffb8\001\002\000\004\016\235\001\002\000\004" +
    "\061\236\001\002\000\004\017\237\001\002\000\004\016" +
    "\240\001\002\000\004\062\275\001\002\000\004\016\242" +
    "\001\002\000\006\014\244\062\243\001\002\000\004\017" +
    "\263\001\002\000\004\061\245\001\002\000\004\017\246" +
    "\001\002\000\004\016\247\001\002\000\004\063\250\001" +
    "\002\000\004\017\251\001\002\000\004\102\252\001\002" +
    "\000\004\016\253\001\002\000\004\014\254\001\002\000" +
    "\004\063\255\001\002\000\004\017\256\001\002\000\004" +
    "\016\257\001\002\000\004\014\260\001\002\000\004\060" +
    "\261\001\002\000\004\017\262\001\002\000\004\005\uffde" +
    "\001\002\000\006\020\265\036\266\001\002\000\004\016" +
    "\271\001\002\000\022\004\045\012\051\035\050\036\044" +
    "\037\047\102\uff5b\103\uff5b\104\052\001\002\000\014\016" +
    "\uffac\017\uffac\052\uffac\065\uffac\066\uffac\001\002\000\016" +
    "\011\057\012\060\013\056\014\063\015\062\021\270\001" +
    "\002\000\014\016\uffad\017\uffad\052\uffad\065\uffad\066\uffad" +
    "\001\002\000\004\014\272\001\002\000\004\062\273\001" +
    "\002\000\004\017\274\001\002\000\004\016\uffc9\001\002" +
    "\000\004\017\276\001\002\000\006\020\265\036\266\001" +
    "\002\000\004\016\300\001\002\000\004\014\301\001\002" +
    "\000\004\062\302\001\002\000\004\017\303\001\002\000" +
    "\004\016\uffc8\001\002\000\006\071\305\072\306\001\002" +
    "\000\020\017\uffbc\051\uffbc\052\uffbc\057\uffbc\065\uffbc\066" +
    "\uffbc\070\uffbc\001\002\000\020\017\uffbd\051\uffbd\052\uffbd" +
    "\057\uffbd\065\uffbd\066\uffbd\070\uffbd\001\002\000\004\102" +
    "\310\001\002\000\022\017\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\057\uffc1\065\uffc1\066\uffc1\070\uffc1\001\002\000\004\102" +
    "\312\001\002\000\024\017\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\057\uffbf\065\uffbf\066\uffbf\070\uffbf\001\002\000" +
    "\022\017\uffc4\044\207\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\001\002\000\020\017\uffc2\045\213\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002\000\016" +
    "\017\uffbe\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe\001" +
    "\002\000\014\017\uffc0\047\220\050\uffc0\051\uffc0\052\uffc0" +
    "\001\002\000\012\017\uffbb\050\222\051\uffbb\052\uffbb\001" +
    "\002\000\010\017\uffb9\051\225\052\uffb9\001\002\000\006" +
    "\017\uffb7\052\231\001\002\000\004\017\323\001\002\000" +
    "\004\016\325\001\002\000\006\005\uffe2\016\u015d\001\002" +
    "\000\022\014\334\053\335\054\332\055\331\056\326\060" +
    "\333\064\327\067\330\001\002\000\026\017\uffc6\043\203" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\057\uffc6\001\002\000\030\017\uffc6\043\203\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\065" +
    "\uffc6\066\uffc6\001\002\000\024\043\203\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\070\uffc6\001" +
    "\002\000\024\017\uffc6\043\203\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\001\002\000\024\017" +
    "\uffc6\043\203\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\001\002\000\024\017\uffc6\043\203\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\001\002\000\006\036\353\053\354\001\002\000\024\017" +
    "\uffc6\043\203\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\001\002\000\022\017\uffc4\044\207\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002" +
    "\000\020\017\uffc2\045\213\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\001\002\000\016\017\uffbe\046\216\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\001\002\000\014\017\uffc0\047" +
    "\220\050\uffc0\051\uffc0\052\uffc0\001\002\000\012\017\uffbb" +
    "\050\222\051\uffbb\052\uffbb\001\002\000\010\017\uffb9\051" +
    "\225\052\uffb9\001\002\000\006\017\uffb7\052\231\001\002" +
    "\000\004\017\346\001\002\000\004\016\347\001\002\000" +
    "\004\014\350\001\002\000\004\053\351\001\002\000\004" +
    "\017\352\001\002\000\006\005\uffd1\016\uffd1\001\002\000" +
    "\004\017\356\001\002\000\004\017\355\001\002\000\004" +
    "\005\uffe1\001\002\000\006\005\uffca\016\uffca\001\002\000" +
    "\022\017\uffc4\044\207\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\001\002\000\020\017\uffc2\045\213\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002\000\016" +
    "\017\uffbe\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe\001" +
    "\002\000\014\017\uffc0\047\220\050\uffc0\051\uffc0\052\uffc0" +
    "\001\002\000\012\017\uffbb\050\222\051\uffbb\052\uffbb\001" +
    "\002\000\010\017\uffb9\051\225\052\uffb9\001\002\000\006" +
    "\017\uffb7\052\231\001\002\000\004\017\367\001\002\000" +
    "\004\016\370\001\002\000\004\061\371\001\002\000\004" +
    "\017\372\001\002\000\004\016\240\001\002\000\004\016" +
    "\374\001\002\000\006\014\375\062\243\001\002\000\004" +
    "\061\376\001\002\000\004\017\377\001\002\000\004\016" +
    "\u0100\001\002\000\004\063\u0101\001\002\000\004\017\u0102" +
    "\001\002\000\004\102\u0103\001\002\000\004\016\u0104\001" +
    "\002\000\004\014\u0105\001\002\000\004\063\u0106\001\002" +
    "\000\004\017\u0107\001\002\000\004\016\u0108\001\002\000" +
    "\004\014\u0109\001\002\000\004\060\u010a\001\002\000\004" +
    "\017\u010b\001\002\000\006\005\uffcd\016\uffcd\001\002\000" +
    "\022\017\uffc4\044\207\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\001\002\000\020\017\uffc2\045\213\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002\000\016" +
    "\017\uffbe\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe\001" +
    "\002\000\014\017\uffc0\047\220\050\uffc0\051\uffc0\052\uffc0" +
    "\001\002\000\012\017\uffbb\050\222\051\uffbb\052\uffbb\001" +
    "\002\000\010\017\uffb9\051\225\052\uffb9\001\002\000\006" +
    "\017\uffb7\052\231\001\002\000\004\017\u0114\001\002\000" +
    "\006\020\265\036\266\001\002\000\004\016\u0116\001\002" +
    "\000\004\014\u0117\001\002\000\004\054\u0118\001\002\000" +
    "\004\017\u0119\001\002\000\006\005\uffd0\016\uffd0\001\002" +
    "\000\022\017\uffc4\044\207\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\001\002\000\020\017\uffc2\045\213" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002\000" +
    "\016\017\uffbe\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\001\002\000\014\017\uffc0\047\220\050\uffc0\051\uffc0\052" +
    "\uffc0\001\002\000\012\017\uffbb\050\222\051\uffbb\052\uffbb" +
    "\001\002\000\010\017\uffb9\051\225\052\uffb9\001\002\000" +
    "\006\017\uffb7\052\231\001\002\000\004\017\u0122\001\002" +
    "\000\006\020\265\036\266\001\002\000\004\016\u0124\001" +
    "\002\000\004\014\u0125\001\002\000\004\055\u0126\001\002" +
    "\000\004\017\u0127\001\002\000\006\005\uffcf\016\uffcf\001" +
    "\002\000\022\044\207\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\070\uffc4\001\002\000\020\045\213\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\070\uffc2\001\002" +
    "\000\016\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe\070" +
    "\uffbe\001\002\000\014\047\220\050\uffc0\051\uffc0\052\uffc0" +
    "\070\uffc0\001\002\000\012\050\222\051\uffbb\052\uffbb\070" +
    "\uffbb\001\002\000\010\051\225\052\uffb9\070\uffb9\001\002" +
    "\000\006\052\231\070\uffb7\001\002\000\004\070\u0130\001" +
    "\002\000\004\006\u0133\001\002\000\004\017\u0132\001\002" +
    "\000\006\005\uffcb\016\uffcb\001\002\000\004\037\u0134\001" +
    "\002\000\004\017\uffb0\001\002\000\026\017\uffc4\044\207" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\065" +
    "\uffc4\066\uffc4\001\002\000\024\017\uffc2\045\213\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\065\uffc2\066\uffc2\001" +
    "\002\000\022\017\uffbe\046\216\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\065\uffbe\066\uffbe\001\002\000\020\017\uffc0\047" +
    "\220\050\uffc0\051\uffc0\052\uffc0\065\uffc0\066\uffc0\001\002" +
    "\000\016\017\uffbb\050\222\051\uffbb\052\uffbb\065\uffbb\066" +
    "\uffbb\001\002\000\014\017\uffb9\051\225\052\uffb9\065\uffb9" +
    "\066\uffb9\001\002\000\012\017\uffb7\052\231\065\uffb7\066" +
    "\uffb7\001\002\000\010\017\uffb3\065\u013e\066\uffb3\001\002" +
    "\000\006\017\uffb1\066\u0142\001\002\000\004\006\u013f\001" +
    "\002\000\004\102\u0140\001\002\000\006\017\uffb4\066\uffb4" +
    "\001\002\000\004\017\u0145\001\002\000\004\006\u0143\001" +
    "\002\000\004\102\u0144\001\002\000\004\017\uffb2\001\002" +
    "\000\004\102\u0146\001\002\000\004\016\u0147\001\002\000" +
    "\004\014\u0148\001\002\000\004\064\u0149\001\002\000\004" +
    "\017\u014a\001\002\000\006\005\uffcc\016\uffcc\001\002\000" +
    "\024\017\uffc4\044\207\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\057\uffc4\001\002\000\022\017\uffc2\045" +
    "\213\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\057\uffc2" +
    "\001\002\000\020\017\uffbe\046\216\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\057\uffbe\001\002\000\016\017\uffc0\047\220" +
    "\050\uffc0\051\uffc0\052\uffc0\057\uffc0\001\002\000\014\017" +
    "\uffbb\050\222\051\uffbb\052\uffbb\057\uffbb\001\002\000\012" +
    "\017\uffb9\051\225\052\uffb9\057\uffb9\001\002\000\010\017" +
    "\uffb5\052\uffb5\057\u0152\001\002\000\004\006\u015b\001\002" +
    "\000\006\017\uffb7\052\231\001\002\000\004\017\u0155\001" +
    "\002\000\006\020\265\036\266\001\002\000\004\016\u0157" +
    "\001\002\000\004\014\u0158\001\002\000\004\056\u0159\001" +
    "\002\000\004\017\u015a\001\002\000\006\005\uffce\016\uffce" +
    "\001\002\000\006\020\265\036\266\001\002\000\012\017" +
    "\uffb6\052\uffb6\065\uffb6\066\uffb6\001\002\000\022\014\u0165" +
    "\053\u0163\054\u0162\055\u0161\056\u015e\060\u0164\064\u015f\067" +
    "\u0160\001\002\000\026\017\uffc6\043\203\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\057\uffc6\001" +
    "\002\000\030\017\uffc6\043\203\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\065\uffc6\066\uffc6\001" +
    "\002\000\024\043\203\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\070\uffc6\001\002\000\024\017" +
    "\uffc6\043\203\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\001\002\000\024\017\uffc6\043\203\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\001\002\000\024\017\uffc6\043\203\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\001\002\000\024" +
    "\017\uffc6\043\203\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\001\002\000\006\036\u0166\053\u0167" +
    "\001\002\000\004\017\u0169\001\002\000\004\017\u0168\001" +
    "\002\000\006\005\uffda\016\uffda\001\002\000\006\005\uffd2" +
    "\016\uffd2\001\002\000\022\017\uffc4\044\207\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\020" +
    "\017\uffc2\045\213\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\001\002\000\016\017\uffbe\046\216\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\001\002\000\014\017\uffc0\047\220\050" +
    "\uffc0\051\uffc0\052\uffc0\001\002\000\012\017\uffbb\050\222" +
    "\051\uffbb\052\uffbb\001\002\000\010\017\uffb9\051\225\052" +
    "\uffb9\001\002\000\006\017\uffb7\052\231\001\002\000\004" +
    "\017\u0172\001\002\000\004\016\u0173\001\002\000\004\061" +
    "\u0174\001\002\000\004\017\u0175\001\002\000\004\016\240" +
    "\001\002\000\004\016\u0177\001\002\000\006\014\u0178\062" +
    "\243\001\002\000\004\061\u0179\001\002\000\004\017\u017a" +
    "\001\002\000\004\016\u017b\001\002\000\004\063\u017c\001" +
    "\002\000\004\017\u017d\001\002\000\004\102\u017e\001\002" +
    "\000\004\016\u017f\001\002\000\004\014\u0180\001\002\000" +
    "\004\063\u0181\001\002\000\004\017\u0182\001\002\000\004" +
    "\016\u0183\001\002\000\004\014\u0184\001\002\000\004\060" +
    "\u0185\001\002\000\004\017\u0186\001\002\000\006\005\uffd5" +
    "\016\uffd5\001\002\000\022\017\uffc4\044\207\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\020" +
    "\017\uffc2\045\213\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\001\002\000\016\017\uffbe\046\216\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\001\002\000\014\017\uffc0\047\220\050" +
    "\uffc0\051\uffc0\052\uffc0\001\002\000\012\017\uffbb\050\222" +
    "\051\uffbb\052\uffbb\001\002\000\010\017\uffb9\051\225\052" +
    "\uffb9\001\002\000\006\017\uffb7\052\231\001\002\000\004" +
    "\017\u018f\001\002\000\004\016\u0190\001\002\000\004\014" +
    "\u0191\001\002\000\004\053\u0192\001\002\000\004\017\u0193" +
    "\001\002\000\006\005\uffd9\016\uffd9\001\002\000\022\017" +
    "\uffc4\044\207\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\001\002\000\020\017\uffc2\045\213\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002\000\016\017\uffbe" +
    "\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe\001\002\000" +
    "\014\017\uffc0\047\220\050\uffc0\051\uffc0\052\uffc0\001\002" +
    "\000\012\017\uffbb\050\222\051\uffbb\052\uffbb\001\002\000" +
    "\010\017\uffb9\051\225\052\uffb9\001\002\000\006\017\uffb7" +
    "\052\231\001\002\000\004\017\u019c\001\002\000\006\020" +
    "\265\036\266\001\002\000\004\016\u019e\001\002\000\004" +
    "\014\u019f\001\002\000\004\054\u01a0\001\002\000\004\017" +
    "\u01a1\001\002\000\006\005\uffd8\016\uffd8\001\002\000\022" +
    "\017\uffc4\044\207\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\001\002\000\020\017\uffc2\045\213\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002\000\016\017" +
    "\uffbe\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe\001\002" +
    "\000\014\017\uffc0\047\220\050\uffc0\051\uffc0\052\uffc0\001" +
    "\002\000\012\017\uffbb\050\222\051\uffbb\052\uffbb\001\002" +
    "\000\010\017\uffb9\051\225\052\uffb9\001\002\000\006\017" +
    "\uffb7\052\231\001\002\000\004\017\u01aa\001\002\000\006" +
    "\020\265\036\266\001\002\000\004\016\u01ac\001\002\000" +
    "\004\014\u01ad\001\002\000\004\055\u01ae\001\002\000\004" +
    "\017\u01af\001\002\000\006\005\uffd7\016\uffd7\001\002\000" +
    "\022\044\207\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\070\uffc4\001\002\000\020\045\213\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\070\uffc2\001\002\000\016" +
    "\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe\070\uffbe\001" +
    "\002\000\014\047\220\050\uffc0\051\uffc0\052\uffc0\070\uffc0" +
    "\001\002\000\012\050\222\051\uffbb\052\uffbb\070\uffbb\001" +
    "\002\000\010\051\225\052\uffb9\070\uffb9\001\002\000\006" +
    "\052\231\070\uffb7\001\002\000\004\070\u0130\001\002\000" +
    "\004\017\u01b9\001\002\000\006\005\uffd3\016\uffd3\001\002" +
    "\000\026\017\uffc4\044\207\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\065\uffc4\066\uffc4\001\002\000\024" +
    "\017\uffc2\045\213\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\065\uffc2\066\uffc2\001\002\000\022\017\uffbe\046\216" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\065\uffbe\066\uffbe\001" +
    "\002\000\020\017\uffc0\047\220\050\uffc0\051\uffc0\052\uffc0" +
    "\065\uffc0\066\uffc0\001\002\000\016\017\uffbb\050\222\051" +
    "\uffbb\052\uffbb\065\uffbb\066\uffbb\001\002\000\014\017\uffb9" +
    "\051\225\052\uffb9\065\uffb9\066\uffb9\001\002\000\012\017" +
    "\uffb7\052\231\065\uffb7\066\uffb7\001\002\000\010\017\uffb3" +
    "\065\u013e\066\uffb3\001\002\000\006\017\uffb1\066\u0142\001" +
    "\002\000\004\017\u01c4\001\002\000\004\102\u01c5\001\002" +
    "\000\004\016\u01c6\001\002\000\004\014\u01c7\001\002\000" +
    "\004\064\u01c8\001\002\000\004\017\u01c9\001\002\000\006" +
    "\005\uffd4\016\uffd4\001\002\000\024\017\uffc4\044\207\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\057\uffc4" +
    "\001\002\000\022\017\uffc2\045\213\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\057\uffc2\001\002\000\020\017\uffbe" +
    "\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe\057\uffbe\001" +
    "\002\000\016\017\uffc0\047\220\050\uffc0\051\uffc0\052\uffc0" +
    "\057\uffc0\001\002\000\014\017\uffbb\050\222\051\uffbb\052" +
    "\uffbb\057\uffbb\001\002\000\012\017\uffb9\051\225\052\uffb9" +
    "\057\uffb9\001\002\000\010\017\uffb5\052\uffb5\057\u0152\001" +
    "\002\000\006\017\uffb7\052\231\001\002\000\004\017\u01d3" +
    "\001\002\000\006\020\265\036\266\001\002\000\004\016" +
    "\u01d5\001\002\000\004\014\u01d6\001\002\000\004\056\u01d7" +
    "\001\002\000\004\017\u01d8\001\002\000\006\005\uffd6\016" +
    "\uffd6\001\002\000\022\017\uffc4\044\207\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\020\017" +
    "\uffc2\045\213\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\001\002\000\016\017\uffbe\046\216\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\001\002\000\014\017\uffc0\047\220\050\uffc0" +
    "\051\uffc0\052\uffc0\001\002\000\012\017\uffbb\050\222\051" +
    "\uffbb\052\uffbb\001\002\000\010\017\uffb9\051\225\052\uffb9" +
    "\001\002\000\006\017\uffb7\052\231\001\002\000\004\017" +
    "\u01e1\001\002\000\004\020\u01e2\001\002\000\004\036\u01e3" +
    "\001\002\000\004\021\u01e4\001\002\000\004\016\u01e5\001" +
    "\002\000\004\014\u01e6\001\002\000\004\054\u01e7\001\002" +
    "\000\004\017\u01e8\001\002\000\004\005\uffe0\001\002\000" +
    "\022\017\uffc4\044\207\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\001\002\000\020\017\uffc2\045\213\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002\000\016" +
    "\017\uffbe\046\216\047\uffbe\050\uffbe\051\uffbe\052\uffbe\001" +
    "\002\000\014\017\uffc0\047\220\050\uffc0\051\uffc0\052\uffc0" +
    "\001\002\000\012\017\uffbb\050\222\051\uffbb\052\uffbb\001" +
    "\002\000\010\017\uffb9\051\225\052\uffb9\001\002\000\006" +
    "\017\uffb7\052\231\001\002\000\004\017\u01f1\001\002\000" +
    "\004\020\u01f2\001\002\000\004\036\u01f3\001\002\000\004" +
    "\021\u01f4\001\002\000\004\016\u01f5\001\002\000\004\014" +
    "\u01f6\001\002\000\004\055\u01f7\001\002\000\004\017\u01f8" +
    "\001\002\000\004\005\uffdf\001\002\000\022\044\207\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\070\uffc4" +
    "\001\002\000\020\045\213\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\070\uffc2\001\002\000\016\046\216\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\070\uffbe\001\002\000\014\047" +
    "\220\050\uffc0\051\uffc0\052\uffc0\070\uffc0\001\002\000\012" +
    "\050\222\051\uffbb\052\uffbb\070\uffbb\001\002\000\010\051" +
    "\225\052\uffb9\070\uffb9\001\002\000\006\052\231\070\uffb7" +
    "\001\002\000\004\070\u0130\001\002\000\004\017\u0202\001" +
    "\002\000\004\005\uffdc\001\002\000\030\017\uffc4\044\207" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\057" +
    "\uffc4\065\uffc4\066\uffc4\001\002\000\026\017\uffc2\045\213" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\057\uffc2\065" +
    "\uffc2\066\uffc2\001\002\000\024\017\uffbe\046\216\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\057\uffbe\065\uffbe\066\uffbe\001" +
    "\002\000\022\017\uffc0\047\220\050\uffc0\051\uffc0\052\uffc0" +
    "\057\uffc0\065\uffc0\066\uffc0\001\002\000\020\017\uffbb\050" +
    "\222\051\uffbb\052\uffbb\057\uffbb\065\uffbb\066\uffbb\001\002" +
    "\000\016\017\uffb9\051\225\052\uffb9\057\uffb9\065\uffb9\066" +
    "\uffb9\001\002\000\014\017\uffb5\052\uffb5\057\u0152\065\uffb5" +
    "\066\uffb5\001\002\000\012\017\uffb7\052\231\065\uffb7\066" +
    "\uffb7\001\002\000\010\017\uffb3\065\u013e\066\uffb3\001\002" +
    "\000\006\017\uffb1\066\u0142\001\002\000\004\017\u020e\001" +
    "\002\000\004\102\u020f\001\002\000\004\016\u0210\001\002" +
    "\000\004\014\u0211\001\002\000\004\064\u0212\001\002\000" +
    "\004\017\u0213\001\002\000\004\005\uffdd\001\002\000\004" +
    "\010\u0215\001\002\000\024\021\uffe3\034\162\036\021\042" +
    "\165\073\022\075\005\077\010\100\007\101\006\001\002" +
    "\000\004\021\uffec\001\002\000\004\021\uffe7\001\002\000" +
    "\024\021\uffe3\034\162\036\021\042\165\073\022\075\005" +
    "\077\010\100\007\101\006\001\002\000\004\021\uffe4\001" +
    "\002\000\006\007\u0229\010\u022a\001\002\000\012\006\u021c" +
    "\007\uffef\010\uffef\032\u021d\001\002\000\024\004\075\012" +
    "\051\020\u0222\035\050\036\044\037\077\102\uff5b\103\uff5b" +
    "\104\100\001\002\000\004\102\u021f\001\002\000\006\007" +
    "\ufff4\010\ufff4\001\002\000\004\033\u0220\001\002\000\006" +
    "\007\ufff1\010\ufff1\001\002\000\020\007\ufff3\010\ufff3\011" +
    "\057\012\060\013\056\014\063\015\062\001\002\000\022" +
    "\004\045\012\051\035\050\036\044\037\047\102\uff5b\103" +
    "\uff5b\104\052\001\002\000\016\007\ufff2\010\ufff2\026\106" +
    "\027\107\030\105\031\104\001\002\000\020\007\uff80\011" +
    "\057\012\060\013\056\014\063\015\062\021\uff80\001\002" +
    "\000\006\007\u0226\021\u0227\001\002\000\022\004\045\012" +
    "\051\035\050\036\044\037\047\102\uff5b\103\uff5b\104\052" +
    "\001\002\000\006\007\ufff0\010\ufff0\001\002\000\020\007" +
    "\uff81\011\057\012\060\013\056\014\063\015\062\021\uff81" +
    "\001\002\000\004\036\u022c\001\002\000\024\021\uffe3\034" +
    "\162\036\021\042\165\073\022\075\005\077\010\100\007" +
    "\101\006\001\002\000\004\021\uffeb\001\002\000\012\006" +
    "\u021c\007\uffef\010\uffef\032\u021d\001\002\000\006\007\ufff5" +
    "\010\ufff5\001\002\000\004\021\uffe6\001\002\000\004\021" +
    "\uffe5\001\002\000\024\021\uffe3\034\162\036\021\042\165" +
    "\073\022\075\005\077\010\100\007\101\006\001\002\000" +
    "\004\021\uffea\001\002\000\024\021\uffe3\034\162\036\021" +
    "\042\165\073\022\075\005\077\010\100\007\101\006\001" +
    "\002\000\004\021\uffe9\001\002\000\024\021\uffe3\034\162" +
    "\036\021\042\165\073\022\075\005\077\010\100\007\101" +
    "\006\001\002\000\004\021\uffe8\001\002\000\026\002\uffed" +
    "\034\uffed\036\uffed\040\uffed\041\uffed\073\uffed\075\uffed\077" +
    "\uffed\100\uffed\101\uffed\001\002\000\004\016\u0238\001\002" +
    "\000\004\036\u0239\001\002\000\004\014\u023a\001\002\000" +
    "\004\017\u023b\001\002\000\004\007\u023c\001\002\000\004" +
    "\036\u023d\001\002\000\004\005\u023e\001\002\000\004\010" +
    "\u023f\001\002\000\026\002\uffee\034\uffee\036\uffee\040\uffee" +
    "\041\uffee\073\uffee\075\uffee\077\uffee\100\uffee\101\uffee\001" +
    "\002\000\004\002\000\001\002\000\026\002\ufff6\034\012" +
    "\036\021\040\016\041\017\073\022\075\005\077\010\100" +
    "\007\101\006\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\uffff\001\002\000\006\007\u0229\010\u0245\001\002\000" +
    "\026\002\ufff6\034\012\036\021\040\016\041\017\073\022" +
    "\075\005\077\010\100\007\101\006\001\002\000\004\002" +
    "\ufffe\001\002\000\026\002\ufff6\034\012\036\021\040\016" +
    "\041\017\073\022\075\005\077\010\100\007\101\006\001" +
    "\002\000\004\002\ufff7\001\002\000\016\004\113\012\051" +
    "\037\112\102\uff5b\103\uff5b\104\114\001\002\000\014\005" +
    "\u024b\026\106\027\107\030\105\031\104\001\002\000\004" +
    "\020\u024c\001\002\000\006\021\uff88\034\u024e\001\002\000" +
    "\004\021\u025d\001\002\000\004\036\u0250\001\002\000\012" +
    "\006\u0251\007\u0252\010\u0254\032\u0253\001\002\000\012\006" +
    "\uff82\007\uff82\010\uff82\032\uff82\001\002\000\024\004\075" +
    "\012\051\020\u0259\035\050\036\044\037\077\102\uff5b\103" +
    "\uff5b\104\100\001\002\000\004\036\u0257\001\002\000\004" +
    "\102\u0255\001\002\000\004\021\uff89\001\002\000\004\033" +
    "\u0256\001\002\000\012\006\uff85\007\uff85\010\uff85\032\uff85" +
    "\001\002\000\012\006\uff83\007\uff83\010\uff83\032\uff83\001" +
    "\002\000\024\006\uff86\007\uff86\010\uff86\011\057\012\060" +
    "\013\056\014\063\015\062\032\uff86\001\002\000\022\004" +
    "\045\012\051\035\050\036\044\037\047\102\uff5b\103\uff5b" +
    "\104\052\001\002\000\022\006\uff87\007\uff87\010\uff87\026" +
    "\106\027\107\030\105\031\104\032\uff87\001\002\000\006" +
    "\007\u0226\021\u025c\001\002\000\012\006\uff84\007\uff84\010" +
    "\uff84\032\uff84\001\002\000\032\002\uff8a\021\uff8a\034\uff8a" +
    "\036\uff8a\040\uff8a\041\uff8a\042\uff8a\073\uff8a\075\uff8a\077" +
    "\uff8a\100\uff8a\101\uff8a\001\002\000\022\004\045\012\051" +
    "\035\050\036\044\037\047\102\uff5b\103\uff5b\104\052\001" +
    "\002\000\016\005\u0260\011\057\012\060\013\056\014\063" +
    "\015\062\001\002\000\004\020\u0261\001\002\000\016\034" +
    "\u0267\036\021\075\005\077\010\100\007\101\006\001\002" +
    "\000\004\010\u0287\001\002\000\004\010\u0286\001\002\000" +
    "\020\021\u027a\034\u027e\036\021\075\005\077\010\100\007" +
    "\101\006\001\002\000\020\021\uff92\034\uff92\036\uff92\075" +
    "\uff92\077\uff92\100\uff92\101\uff92\001\002\000\020\021\uff93" +
    "\034\uff93\036\uff93\075\uff93\077\uff93\100\uff93\101\uff93\001" +
    "\002\000\004\036\u026c\001\002\000\004\010\u026a\001\002" +
    "\000\020\021\uff94\034\uff94\036\uff94\075\uff94\077\uff94\100" +
    "\uff94\101\uff94\001\002\000\020\021\uff91\034\uff91\036\uff91" +
    "\075\uff91\077\uff91\100\uff91\101\uff91\001\002\000\012\006" +
    "\u026d\007\u026e\010\u0270\032\u026f\001\002\000\012\006\uff8b" +
    "\007\uff8b\010\uff8b\032\uff8b\001\002\000\024\004\075\012" +
    "\051\020\u0275\035\050\036\044\037\077\102\uff5b\103\uff5b" +
    "\104\100\001\002\000\004\036\u0273\001\002\000\004\102" +
    "\u0271\001\002\000\020\021\uff97\034\uff97\036\uff97\075\uff97" +
    "\077\uff97\100\uff97\101\uff97\001\002\000\004\033\u0272\001" +
    "\002\000\012\006\uff8e\007\uff8e\010\uff8e\032\uff8e\001\002" +
    "\000\012\006\uff8c\007\uff8c\010\uff8c\032\uff8c\001\002\000" +
    "\024\006\uff8f\007\uff8f\010\uff8f\011\057\012\060\013\056" +
    "\014\063\015\062\032\uff8f\001\002\000\022\004\045\012" +
    "\051\035\050\036\044\037\047\102\uff5b\103\uff5b\104\052" +
    "\001\002\000\022\006\uff90\007\uff90\010\uff90\026\106\027" +
    "\107\030\105\031\104\032\uff90\001\002\000\006\007\u0226" +
    "\021\u0278\001\002\000\012\006\uff8d\007\uff8d\010\uff8d\032" +
    "\uff8d\001\002\000\004\010\u0285\001\002\000\032\002\uff9f" +
    "\021\uff9f\034\uff9f\036\uff9f\040\uff9f\041\uff9f\042\uff9f\073" +
    "\uff9f\075\uff9f\077\uff9f\100\uff9f\101\uff9f\001\002\000\004" +
    "\010\u0284\001\002\000\020\021\uff99\034\uff99\036\uff99\075" +
    "\uff99\077\uff99\100\uff99\101\uff99\001\002\000\020\021\uff9a" +
    "\034\uff9a\036\uff9a\075\uff9a\077\uff9a\100\uff9a\101\uff9a\001" +
    "\002\000\004\036\u026c\001\002\000\004\010\u0281\001\002" +
    "\000\020\021\uff9b\034\uff9b\036\uff9b\075\uff9b\077\uff9b\100" +
    "\uff9b\101\uff9b\001\002\000\020\021\uff98\034\uff98\036\uff98" +
    "\075\uff98\077\uff98\100\uff98\101\uff98\001\002\000\012\006" +
    "\u026d\007\u026e\010\u0283\032\u026f\001\002\000\020\021\uff9e" +
    "\034\uff9e\036\uff9e\075\uff9e\077\uff9e\100\uff9e\101\uff9e\001" +
    "\002\000\020\021\uff9d\034\uff9d\036\uff9d\075\uff9d\077\uff9d" +
    "\100\uff9d\101\uff9d\001\002\000\020\021\uff9c\034\uff9c\036" +
    "\uff9c\075\uff9c\077\uff9c\100\uff9c\101\uff9c\001\002\000\020" +
    "\021\uff96\034\uff96\036\uff96\075\uff96\077\uff96\100\uff96\101" +
    "\uff96\001\002\000\020\021\uff95\034\uff95\036\uff95\075\uff95" +
    "\077\uff95\100\uff95\101\uff95\001\002\000\022\004\075\012" +
    "\051\035\050\036\044\037\077\102\uff5b\103\uff5b\104\100" +
    "\001\002\000\016\005\uff7a\011\057\012\060\013\056\014" +
    "\063\015\062\001\002\000\014\005\uff79\026\106\027\107" +
    "\030\105\031\104\001\002\000\004\005\u028c\001\002\000" +
    "\004\010\uff7b\001\002\000\016\004\113\012\051\037\112" +
    "\102\uff5b\103\uff5b\104\114\001\002\000\014\005\u028f\026" +
    "\106\027\107\030\105\031\104\001\002\000\004\020\u0290" +
    "\001\002\000\006\021\uffa6\034\u0291\001\002\000\004\036" +
    "\u02a3\001\002\000\004\021\u0293\001\002\000\034\002\uffa8" +
    "\021\uffa8\034\uffa8\036\uffa8\040\uffa8\041\uffa8\042\uffa8\073" +
    "\uffa8\075\uffa8\076\u0294\077\uffa8\100\uffa8\101\uffa8\001\002" +
    "\000\006\020\u0296\075\u0297\001\002\000\032\002\uffab\021" +
    "\uffab\034\uffab\036\uffab\040\uffab\041\uffab\042\uffab\073\uffab" +
    "\075\uffab\077\uffab\100\uffab\101\uffab\001\002\000\006\021" +
    "\uffa6\034\u0291\001\002\000\004\004\u0298\001\002\000\016" +
    "\004\113\012\051\037\112\102\uff5b\103\uff5b\104\114\001" +
    "\002\000\014\005\u029a\026\106\027\107\030\105\031\104" +
    "\001\002\000\004\020\u029b\001\002\000\006\021\uffa6\034" +
    "\u0291\001\002\000\004\021\u029d\001\002\000\034\002\uffa8" +
    "\021\uffa8\034\uffa8\036\uffa8\040\uffa8\041\uffa8\042\uffa8\073" +
    "\uffa8\075\uffa8\076\u0294\077\uffa8\100\uffa8\101\uffa8\001\002" +
    "\000\032\002\uffaa\021\uffaa\034\uffaa\036\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\073\uffaa\075\uffaa\077\uffaa\100\uffaa\101\uffaa" +
    "\001\002\000\004\021\u02a0\001\002\000\034\002\uffa8\021" +
    "\uffa8\034\uffa8\036\uffa8\040\uffa8\041\uffa8\042\uffa8\073\uffa8" +
    "\075\uffa8\076\u0294\077\uffa8\100\uffa8\101\uffa8\001\002\000" +
    "\032\002\uffa9\021\uffa9\034\uffa9\036\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\073\uffa9\075\uffa9\077\uffa9\100\uffa9\101\uffa9\001" +
    "\002\000\012\006\u02a4\007\u02a5\010\u02a7\032\u02a6\001\002" +
    "\000\012\006\uffa0\007\uffa0\010\uffa0\032\uffa0\001\002\000" +
    "\024\004\075\012\051\020\u02ac\035\050\036\044\037\077" +
    "\102\uff5b\103\uff5b\104\100\001\002\000\004\036\u02aa\001" +
    "\002\000\004\102\u02a8\001\002\000\004\021\uffa7\001\002" +
    "\000\004\033\u02a9\001\002\000\012\006\uffa3\007\uffa3\010" +
    "\uffa3\032\uffa3\001\002\000\012\006\uffa1\007\uffa1\010\uffa1" +
    "\032\uffa1\001\002\000\024\006\uffa4\007\uffa4\010\uffa4\011" +
    "\057\012\060\013\056\014\063\015\062\032\uffa4\001\002" +
    "\000\022\004\045\012\051\035\050\036\044\037\047\102" +
    "\uff5b\103\uff5b\104\052\001\002\000\022\006\uffa5\007\uffa5" +
    "\010\uffa5\026\106\027\107\030\105\031\104\032\uffa5\001" +
    "\002\000\006\007\u0226\021\u02af\001\002\000\012\006\uffa2" +
    "\007\uffa2\010\uffa2\032\uffa2\001\002\000\004\002\ufff8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02ae\000\026\002\025\011\013\013\022\015\014\016" +
    "\012\032\023\040\024\044\003\047\017\052\010\001\001" +
    "\000\026\002\u02af\011\013\013\022\015\014\016\012\032" +
    "\023\040\024\044\003\047\017\052\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0243\001\001\000\026" +
    "\002\u0242\011\013\013\022\015\014\016\012\032\023\040" +
    "\024\044\003\047\017\052\010\001\001\000\002\001\001" +
    "\000\026\002\u023f\011\013\013\022\015\014\016\012\032" +
    "\023\040\024\044\003\047\017\052\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\146\011\013\013" +
    "\022\015\014\016\012\032\023\040\024\044\003\047\017" +
    "\052\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\027\011\013" +
    "\013\022\015\014\016\012\032\023\040\024\044\003\047" +
    "\017\052\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\031\011\013\013\022\015" +
    "\014\016\012\032\023\040\024\044\003\047\017\052\010" +
    "\001\001\000\002\001\001\000\026\002\033\011\013\013" +
    "\022\015\014\016\012\032\023\040\024\044\003\047\017" +
    "\052\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\075\006\102\007\073\010\100\012\145\054\052\056" +
    "\072\001\001\000\010\003\045\054\052\056\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\123\054" +
    "\052\056\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\054\054\052\056\042\001\001" +
    "\000\002\001\001\000\010\003\067\054\052\056\042\001" +
    "\001\000\010\003\066\054\052\056\042\001\001\000\010" +
    "\003\065\054\052\056\042\001\001\000\002\001\001\000" +
    "\010\003\064\054\052\056\042\001\001\000\010\003\063" +
    "\054\052\056\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\075\006\102\007\073\010" +
    "\100\012\101\054\052\056\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\123\006\102\007\073\010" +
    "\114\054\052\056\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\102\007\073\010\122" +
    "\056\107\001\001\000\012\006\102\007\073\010\121\056" +
    "\107\001\001\000\012\006\102\007\073\010\120\056\107" +
    "\001\001\000\012\006\102\007\073\010\110\056\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\102\007\073\010\114\056\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\140\056\107\001\001\000\006\007\137\056" +
    "\107\001\001\000\006\007\136\056\107\001\001\000\006" +
    "\007\135\056\107\001\001\000\006\007\134\056\107\001" +
    "\001\000\006\007\133\056\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\155\013\154\031\153\032" +
    "\156\040\163\044\157\047\160\052\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\155\013\154\031\u022e\032\156\040\163" +
    "\044\157\047\160\052\162\001\001\000\022\011\155\013" +
    "\154\031\u022d\032\156\040\163\044\157\047\160\052\162" +
    "\001\001\000\004\004\u0219\001\001\000\002\001\001\000" +
    "\022\011\155\013\154\031\u0216\032\156\040\163\044\157" +
    "\047\160\052\162\001\001\000\002\001\001\000\004\017" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0202\001\001\000\004\021\u01f8\001\001\000\004\021" +
    "\u01e8\001\001\000\004\021\u01d8\001\001\000\004\021\312" +
    "\001\001\000\004\021\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\220\001\001\000\002\001\001\000\004\033" +
    "\222\001\001\000\002\001\001\000\004\026\223\001\001" +
    "\000\004\027\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\263\001\001\000\002\001\001\000\010\003\266\054" +
    "\052\056\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\313\001\001\000\004\023\314\001\001\000" +
    "\004\025\315\001\001\000\004\024\316\001\001\000\004" +
    "\033\317\001\001\000\004\026\320\001\001\000\004\027" +
    "\321\001\001\000\002\001\001\000\004\020\323\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u014a\001" +
    "\001\000\004\021\u0134\001\001\000\004\021\u0127\001\001" +
    "\000\004\021\u0119\001\001\000\004\021\u010b\001\001\000" +
    "\004\021\356\001\001\000\002\001\001\000\004\021\335" +
    "\001\001\000\004\022\336\001\001\000\004\023\337\001" +
    "\001\000\004\025\340\001\001\000\004\024\341\001\001" +
    "\000\004\033\342\001\001\000\004\026\343\001\001\000" +
    "\004\027\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\357\001\001\000" +
    "\004\023\360\001\001\000\004\025\361\001\001\000\004" +
    "\024\362\001\001\000\004\033\363\001\001\000\004\026" +
    "\364\001\001\000\004\027\365\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u010c\001" +
    "\001\000\004\023\u010d\001\001\000\004\025\u010e\001\001" +
    "\000\004\024\u010f\001\001\000\004\033\u0110\001\001\000" +
    "\004\026\u0111\001\001\000\004\027\u0112\001\001\000\002" +
    "\001\001\000\004\055\u0114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u011a\001\001\000\004\023\u011b\001" +
    "\001\000\004\025\u011c\001\001\000\004\024\u011d\001\001" +
    "\000\004\033\u011e\001\001\000\004\026\u011f\001\001\000" +
    "\004\027\u0120\001\001\000\002\001\001\000\004\055\u0122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u0128" +
    "\001\001\000\004\023\u0129\001\001\000\004\025\u012a\001" +
    "\001\000\004\024\u012b\001\001\000\004\033\u012c\001\001" +
    "\000\004\026\u012d\001\001\000\004\027\u012e\001\001\000" +
    "\004\037\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u0135\001\001\000\004\023\u0136\001\001\000\004" +
    "\025\u0137\001\001\000\004\024\u0138\001\001\000\004\033" +
    "\u0139\001\001\000\004\026\u013a\001\001\000\004\027\u013b" +
    "\001\001\000\004\035\u013c\001\001\000\004\036\u0140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u014b\001\001\000\004\023\u014c\001\001" +
    "\000\004\025\u014d\001\001\000\004\024\u014e\001\001\000" +
    "\004\033\u014f\001\001\000\004\026\u0150\001\001\000\004" +
    "\030\u0152\001\001\000\002\001\001\000\004\027\u0153\001" +
    "\001\000\002\001\001\000\004\055\u0155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\u015b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u01c9\001\001\000" +
    "\004\021\u01b9\001\001\000\004\021\u01af\001\001\000\004" +
    "\021\u01a1\001\001\000\004\021\u0193\001\001\000\004\021" +
    "\u0186\001\001\000\004\021\u0169\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u016a\001\001\000\004\023\u016b" +
    "\001\001\000\004\025\u016c\001\001\000\004\024\u016d\001" +
    "\001\000\004\033\u016e\001\001\000\004\026\u016f\001\001" +
    "\000\004\027\u0170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\u0175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u0187\001\001\000\004" +
    "\023\u0188\001\001\000\004\025\u0189\001\001\000\004\024" +
    "\u018a\001\001\000\004\033\u018b\001\001\000\004\026\u018c" +
    "\001\001\000\004\027\u018d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0194\001\001\000" +
    "\004\023\u0195\001\001\000\004\025\u0196\001\001\000\004" +
    "\024\u0197\001\001\000\004\033\u0198\001\001\000\004\026" +
    "\u0199\001\001\000\004\027\u019a\001\001\000\002\001\001" +
    "\000\004\055\u019c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u01a2\001\001\000\004\023\u01a3\001\001\000" +
    "\004\025\u01a4\001\001\000\004\024\u01a5\001\001\000\004" +
    "\033\u01a6\001\001\000\004\026\u01a7\001\001\000\004\027" +
    "\u01a8\001\001\000\002\001\001\000\004\055\u01aa\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u01b0\001\001" +
    "\000\004\023\u01b1\001\001\000\004\025\u01b2\001\001\000" +
    "\004\024\u01b3\001\001\000\004\033\u01b4\001\001\000\004" +
    "\026\u01b5\001\001\000\004\027\u01b6\001\001\000\004\037" +
    "\u01b7\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u01ba\001\001\000\004\023\u01bb\001\001\000\004\025" +
    "\u01bc\001\001\000\004\024\u01bd\001\001\000\004\033\u01be" +
    "\001\001\000\004\026\u01bf\001\001\000\004\027\u01c0\001" +
    "\001\000\004\035\u01c1\001\001\000\004\036\u01c2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u01ca\001\001\000\004\023\u01cb\001" +
    "\001\000\004\025\u01cc\001\001\000\004\024\u01cd\001\001" +
    "\000\004\033\u01ce\001\001\000\004\026\u01cf\001\001\000" +
    "\004\030\u01d0\001\001\000\004\027\u01d1\001\001\000\002" +
    "\001\001\000\004\055\u01d3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u01d9\001\001\000\004\023\u01da\001" +
    "\001\000\004\025\u01db\001\001\000\004\024\u01dc\001\001" +
    "\000\004\033\u01dd\001\001\000\004\026\u01de\001\001\000" +
    "\004\027\u01df\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u01e9\001\001\000\004\023\u01ea\001" +
    "\001\000\004\025\u01eb\001\001\000\004\024\u01ec\001\001" +
    "\000\004\033\u01ed\001\001\000\004\026\u01ee\001\001\000" +
    "\004\027\u01ef\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u01f9\001\001\000\004\023\u01fa\001" +
    "\001\000\004\025\u01fb\001\001\000\004\024\u01fc\001\001" +
    "\000\004\033\u01fd\001\001\000\004\026\u01fe\001\001\000" +
    "\004\027\u01ff\001\001\000\004\037\u0200\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0203\001\001\000" +
    "\004\023\u0204\001\001\000\004\025\u0205\001\001\000\004" +
    "\024\u0206\001\001\000\004\033\u0207\001\001\000\004\026" +
    "\u0208\001\001\000\004\030\u0209\001\001\000\004\027\u020a" +
    "\001\001\000\004\035\u020b\001\001\000\004\036\u020c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\011\155\013\154" +
    "\031\u0215\032\156\040\163\044\157\047\160\052\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\011\155" +
    "\013\154\031\u0218\032\156\040\163\044\157\047\160\052" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u021d\001\001\000\016\003\u0220\006\102\007\073\010" +
    "\u0222\054\052\056\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\u0223\014\u0224\054\052\056\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\u0227\054\052\056\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\011\155\013" +
    "\154\031\u022a\032\156\040\163\044\157\047\160\052\162" +
    "\001\001\000\002\001\001\000\004\005\u022c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\011\155\013\154\031\u0230\032\156\040\163\044\157\047" +
    "\160\052\162\001\001\000\002\001\001\000\022\011\155" +
    "\013\154\031\u0232\032\156\040\163\044\157\047\160\052" +
    "\162\001\001\000\002\001\001\000\022\011\155\013\154" +
    "\031\u0234\032\156\040\163\044\157\047\160\052\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\u0241\011\013\013\022\015\014\016\012\032\023\040\024" +
    "\044\003\047\017\052\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\u0245\011\013" +
    "\013\022\015\014\016\012\032\023\040\024\044\003\047" +
    "\017\052\010\001\001\000\002\001\001\000\026\002\u0247" +
    "\011\013\013\022\015\014\016\012\032\023\040\024\044" +
    "\003\047\017\052\010\001\001\000\002\001\001\000\012" +
    "\006\102\007\073\010\u0249\056\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u024c\001\001\000\002" +
    "\001\001\000\004\046\u024e\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\u0257\006\102\007\073\010\u0259" +
    "\054\052\056\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\u0223\014" +
    "\u025a\054\052\056\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\u025e\054\052\056\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\011\u0262\013\u0261\040\u0268\044\u0264\047" +
    "\u0265\050\u0263\052\u0267\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\u027a\013\u0278\040\u027f\044\u027b\047" +
    "\u027c\052\u027e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u026a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\u0273\006\102\007\073\010\u0275\054\052\056" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\u0223\014\u0276\054\052" +
    "\056\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u0281\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\u0288\006\102\007\073\010\u0289\053\u028a\054" +
    "\052\056\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\102\007" +
    "\073\010\u028d\056\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0291\001\001\000\004\043\u02a1\001" +
    "\001\000\002\001\001\000\004\041\u0294\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u029e\001\001\000" +
    "\002\001\001\000\012\006\102\007\073\010\u0298\056\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\u029b\001\001\000\002\001\001\000\004\041\u029d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\u02a0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\u02aa\006\102\007\073\010\u02ac\054\052\056" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\u0223\014\u02ad\054\052" +
    "\056\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico_UFE_GuardarVariables$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico_UFE_GuardarVariables$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico_UFE_GuardarVariables$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  

    public static HashMap<String,Object> hmGuardarVariables= new HashMap<String,Object>();
    public static HashMap<String,Object[]> hmArreglos=new HashMap<String,Object[]>();
    public static ArrayList<Object> temporalLarr = new ArrayList<Object>();
    public static ArrayList<String> listErroresSemanticos = new ArrayList<String>();
    public static Stack<String> pila_erroresSemanticos = new Stack<String>();
    boolean banderaArr=false;
    public static Object [] encabezado={"","",""};
    public static DefaultTableModel tablaerroresSintacticosUFE=new DefaultTableModel(encabezado,0);

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
                
        Object[] cars = {lexema, fila, columna};
        tablaerroresSintacticosUFE.addRow(cars);
        //System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        //System.out.println("\t\tLexema: "+lexema);
        //System.out.println("\t\tFila: "+fila);
        //System.out.println("\t\tColumna: "+columna);

        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        //System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        //System.out.println("\t\tLexema: "+lexema);
        //System.out.println("\t\tFila: "+fila);
        //System.out.println("\t\tColumna: "+columna);     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico_UFE_GuardarVariables$actions {



  private final analisis_sintactico_UFE_GuardarVariables parser;

  /** Constructor */
  CUP$analisis_sintactico_UFE_GuardarVariables$actions(analisis_sintactico_UFE_GuardarVariables parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_UFE_GuardarVariables$do_action_part00000000(
    int                        CUP$analisis_sintactico_UFE_GuardarVariables$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_UFE_GuardarVariables$parser,
    java.util.Stack            CUP$analisis_sintactico_UFE_GuardarVariables$stack,
    int                        CUP$analisis_sintactico_UFE_GuardarVariables$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico_UFE_GuardarVariables$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico_UFE_GuardarVariables$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico_UFE_GuardarVariables$parser.done_parsing();
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= RENDER INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= COMPONENTE INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= variab DECLARARVARIABLE puntoycoma INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= IMPORTT puntoycoma INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= ASIGNARVARIABLE puntoycoma INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= ASIGNAARREGLO puntoycoma INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= INSIF INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= INSREPETIR INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= INSMIENTRAS INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= IMPRIMIR puntoycoma INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARARVARIABLE ::= DECLARARVARIABLE coma id DECLARARVARIABLE2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(c==null){hmGuardarVariables.put(b,0);}else if(c.equals("larr")){} else if(banderaArr==true){ Integer op2=Integer.parseInt(c); Object array[]=new Object[op2]; hmArreglos.put(b,array); banderaArr=false; } else{hmGuardarVariables.put(b,c);}  
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARARVARIABLE ::= id DECLARARVARIABLE2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(b==null){hmGuardarVariables.put(a,0);}else if(b.equals("larr")){} else if (banderaArr==true){ Integer op2=Integer.parseInt(b); Object array[]=new Object[op2]; hmArreglos.put(a,array); banderaArr=false; } else{ hmGuardarVariables.put(a,b); } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARARVARIABLE2 ::= igual ALGEBRAICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE2",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARARVARIABLE2 ::= igual LOGICAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE2",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARARVARIABLE2 ::= corchabre intt corchcierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		 banderaArr=true; RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE2",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARARVARIABLE2 ::= igual llaveabre LISTARREGLO llavecierra 
            {
              String RESULT =null;
		 RESULT="larr"; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE2",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARARVARIABLE2 ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECLARARVARIABLE2",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RENDER ::= renderr parenabre menorque id division mayorque coma id parencierra puntoycoma 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RENDER",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COMPONENTE ::= componentt id parenabre parencierra llaveabre DENTROCOMPONENTE llavecierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("COMPONENTE",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DENTROCOMPONENTE ::= returnn parenabre TIPCOMPONENT parencierra puntoycoma DENTROCOMPONENTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DENTROCOMPONENTE ::= variab DECLARARVARIABLE puntoycoma DENTROCOMPONENTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DENTROCOMPONENTE ::= IMPORTT puntoycoma DENTROCOMPONENTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DENTROCOMPONENTE ::= ASIGNARVARIABLE puntoycoma DENTROCOMPONENTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DENTROCOMPONENTE ::= ASIGNAARREGLO puntoycoma DENTROCOMPONENTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DENTROCOMPONENTE ::= INSIF DENTROCOMPONENTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DENTROCOMPONENTE ::= INSREPETIR DENTROCOMPONENTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DENTROCOMPONENTE ::= INSMIENTRAS DENTROCOMPONENTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DENTROCOMPONENTE ::= IMPRIMIR puntoycoma DENTROCOMPONENTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DENTROCOMPONENTE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROCOMPONENTE",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPCOMPONENT ::= menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque TIPCOMPONENT2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPCOMPONENT ::= menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque division panell mayorque 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPCOMPONENT ::= menorque textt IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque llaveabre id llavecierra menorque division textt mayorque 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-17)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPCOMPONENT ::= menorque textfieldd IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque llaveabre id llavecierra menorque division textfieldd mayorque 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-17)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPCOMPONENT ::= menorque listt IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque elementss mayorque ITEMMS menorque division elementss mayorque menorque defaultt mayorque intt menorque division defaultt mayorque menorque division listt mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-28)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-28)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-28)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-27)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-27)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-27)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-26)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-26)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-26)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-25)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-25)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-25)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-24)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-24)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-24)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-23)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-23)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-23)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-22)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-22)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-22)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-21)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-21)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-21)).value;
		int jcbleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).left;
		int jcbright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).right;
		JComboBox jcb = (JComboBox)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-30)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPCOMPONENT ::= menorque spinnerr IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC ONCLICKKK CLASSNAMEC MAXS MINS mayorque intt menorque division spinnerr mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-18)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPCOMPONENT ::= menorque imagee IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC SRC mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPCOMPONENT ::= menorque division id mayorque 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPCOMPONENT2 ::= TIPCOMPONENT2 menorque division panell mayorque 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPCOMPONENT2 ::= TIPCOMPONENT2 menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque division panell mayorque 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPCOMPONENT2 ::= TIPCOMPONENT2 menorque textt IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque TEXTENCOMPONENTES menorque division textt mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPCOMPONENT2 ::= TIPCOMPONENT2 menorque textfieldd IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque TEXTENCOMPONENTES menorque division textfieldd mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPCOMPONENT2 ::= TIPCOMPONENT2 menorque buttonn IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC ONCLICKKK CLASSNAMEC mayorque TEXTENCOMPONENTES menorque division buttonn mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-17)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPCOMPONENT2 ::= TIPCOMPONENT2 menorque listt IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque elementss mayorque ITEMMS menorque division elementss mayorque menorque defaultt mayorque intt menorque division defaultt mayorque menorque division listt mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-28)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-28)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-28)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-27)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-27)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-27)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-26)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-26)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-26)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-25)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-25)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-25)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-24)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-24)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-24)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-23)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-23)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-23)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-22)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-22)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-22)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-21)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-21)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-21)).value;
		int jcbleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).left;
		int jcbright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).right;
		JComboBox jcb = (JComboBox)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-31)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPCOMPONENT2 ::= TIPCOMPONENT2 menorque spinnerr IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC MAXS MINS mayorque intt menorque division spinnerr mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-18)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPCOMPONENT2 ::= TIPCOMPONENT2 menorque imagee IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC SRC mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPCOMPONENT2 ::= TIPCOMPONENT2 menorque division id mayorque 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPCOMPONENT2 ::= menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque division panell mayorque 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPCOMPONENT2 ::= menorque textt IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque TEXTENCOMPONENTES menorque division textt mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPCOMPONENT2 ::= menorque textfieldd IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque TEXTENCOMPONENTES menorque division textfieldd mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPCOMPONENT2 ::= menorque buttonn IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC ONCLICKKK CLASSNAMEC mayorque TEXTENCOMPONENTES menorque division buttonn mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPCOMPONENT2 ::= menorque listt IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque elementss mayorque ITEMMS menorque division elementss mayorque menorque defaultt mayorque intt menorque division defaultt mayorque menorque division listt mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-28)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-28)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-28)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-27)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-27)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-27)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-26)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-26)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-26)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-25)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-25)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-25)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-24)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-24)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-24)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-23)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-23)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-23)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-22)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-22)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-22)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-21)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-21)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-21)).value;
		int jcbleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).left;
		int jcbright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).right;
		JComboBox jcb = (JComboBox)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-16)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-30)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPCOMPONENT2 ::= menorque spinnerr IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC MAXS MINS mayorque intt menorque division spinnerr mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-15)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-14)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-13)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-10)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-17)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPCOMPONENT2 ::= menorque imagee IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC SRC mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		Color f = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPCOMPONENT2 ::= menorque division id mayorque 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPCOMPONENT2",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ITEMMS ::= ITEMMS menorque itemm mayorque TEXTENCOMPONENTES menorque division itemm mayorque 
            {
              JComboBox RESULT =null;
		int jcbleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).left;
		int jcbright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).right;
		JComboBox jcb = (JComboBox)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ITEMMS",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ITEMMS ::= menorque itemm mayorque TEXTENCOMPONENTES menorque division itemm mayorque 
            {
              JComboBox RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ITEMMS",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IDC ::= iduf igual id 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("IDC",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IDC ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("IDC",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EQUISC ::= equis igual intt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("EQUISC",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EQUISC ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("EQUISC",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // YEC ::= ye igual intt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("YEC",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // YEC ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("YEC",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WIDTHC ::= widthh igual intt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("WIDTHC",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WIDTHC ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("WIDTHC",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // HEIGHTC ::= heightt igual intt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("HEIGHTC",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // HEIGHTC ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("HEIGHTC",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COLORC ::= colorr igual nomcolor 
            {
              Color RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("COLORC",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COLORC ::= colorr igual hexad 
            {
              Color RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("COLORC",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COLORC ::= 
            {
              Color RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("COLORC",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BORDERC ::= borderr igual intt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("BORDERC",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BORDERC ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("BORDERC",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CLASSNAMEC ::= classnamee igual cadena 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("CLASSNAMEC",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CLASSNAMEC ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("CLASSNAMEC",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ONCLICKKK ::= onclickk igual TEXTENCOMPONENTES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a;  
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ONCLICKKK",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ONCLICKKK ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ONCLICKKK",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MAXS ::= maxx igual intt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a;  
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("MAXS",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MAXS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("MAXS",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MINS ::= minn igual intt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a;  
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("MINS",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MINS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("MINS",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SRC ::= srcc igual cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("SRC",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IMPORTT ::= importt cadena 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("IMPORTT",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IMPORTT ::= importt id fromm cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("IMPORTT",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TEXTENCOMPONENTES ::= llaveabre ALGEBRAICA llavecierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TEXTENCOMPONENTES",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TEXTENCOMPONENTES ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TEXTENCOMPONENTES",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSIF ::= sii parenabre LOGICAS parencierra llaveabre DENTROIF llavecierra INSELSEIFELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INSIF",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSELSEIFELSE ::= sinoo sii parenabre LOGICAS parencierra llaveabre DENTROIF llavecierra INSELSEIFELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INSELSEIFELSE",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSELSEIFELSE ::= sinoo llaveabre DENTROIF llavecierra INSELSEIFELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INSELSEIFELSE",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSELSEIFELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INSELSEIFELSE",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DENTROIF ::= variab DECVARIF puntoycoma 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROIF",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DENTROIF ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROIF",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECVARIF ::= DECVARIF igual LOGICAS 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARIF",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECVARIF ::= DECVARIF igual ALGEBRAICA 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARIF",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECVARIF ::= DECVARIF corchabre intt corchcierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARIF",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECVARIF ::= DECVARIF igual llaveabre LISTARREGLO llavecierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARIF",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECVARIF ::= DECVARIF coma id 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARIF",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECVARIF ::= id 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARIF",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSREPETIR ::= repetirr parenabre ALGEBRAICA parencierra llaveabre DENTROREPETIR llavecierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INSREPETIR",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DENTROREPETIR ::= DENTROREPETIR variab DECVARREPETIR puntoycoma 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DENTROREPETIR ::= DENTROREPETIR ASIGNARVARIABLE puntoycoma 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DENTROREPETIR ::= DENTROREPETIR ASIGNAARREGLO puntoycoma 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DENTROREPETIR ::= DENTROREPETIR INSIF 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DENTROREPETIR ::= DENTROREPETIR INSREPETIR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DENTROREPETIR ::= DENTROREPETIR INSMIENTRAS 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DENTROREPETIR ::= DENTROREPETIR IMPRIMIR puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DENTROREPETIR ::= variab DECVARREPETIR puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DENTROREPETIR ::= ASIGNARVARIABLE puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DENTROREPETIR ::= ASIGNAARREGLO puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DENTROREPETIR ::= INSIF 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DENTROREPETIR ::= INSREPETIR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DENTROREPETIR ::= INSMIENTRAS 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DENTROREPETIR ::= IMPRIMIR puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROREPETIR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECVARREPETIR ::= DECVARREPETIR igual LOGICAS 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARREPETIR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECVARREPETIR ::= DECVARREPETIR igual ALGEBRAICA 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARREPETIR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECVARREPETIR ::= DECVARREPETIR corchabre intt corchcierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARREPETIR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECVARREPETIR ::= DECVARREPETIR igual llaveabre LISTARREGLO llavecierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARREPETIR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECVARREPETIR ::= DECVARREPETIR coma id 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARREPETIR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECVARREPETIR ::= id 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARREPETIR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INSMIENTRAS ::= mientrass parenabre LOGICAS parencierra llaveabre DENTROMIENTRAS llavecierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("INSMIENTRAS",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DENTROMIENTRAS ::= variab DECVARMIENTRAS puntoycoma 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROMIENTRAS",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DENTROMIENTRAS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DENTROMIENTRAS",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECVARMIENTRAS ::= DECVARMIENTRAS igual LOGICAS 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARMIENTRAS",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECVARMIENTRAS ::= DECVARMIENTRAS igual ALGEBRAICA 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARMIENTRAS",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECVARMIENTRAS ::= DECVARMIENTRAS corchabre intt corchcierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARMIENTRAS",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECVARMIENTRAS ::= DECVARMIENTRAS igual llaveabre LISTARREGLO llavecierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARMIENTRAS",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECVARMIENTRAS ::= DECVARMIENTRAS coma id 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARMIENTRAS",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECVARMIENTRAS ::= id 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("DECVARMIENTRAS",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LISTARREGLO ::= LISTARREGLO coma ALGEBRAICA 
            {
              String RESULT =null;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("LISTARREGLO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LISTARREGLO ::= ALGEBRAICA 
            {
              String RESULT =null;
		
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("LISTARREGLO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ASIGNARVARIABLE ::= id igual TIPASIGNARVARIABLE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ASIGNARVARIABLE",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGNAARREGLO ::= id corchabre ALGEBRAICA corchcierra igual TIPASIGNARVARIABLE 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ASIGNAARREGLO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPASIGNARVARIABLE ::= ALGEBRAICA 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPASIGNARVARIABLE",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPASIGNARVARIABLE ::= LOGICAS 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("TIPASIGNARVARIABLE",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IMPRIMIR ::= imprimirr parenabre IMPRIOP parencierra 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IMPRIOP ::= ALGEBRAICA 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("IMPRIOP",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IMPRIOP ::= LOGICAS 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("IMPRIOP",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LOGICAS ::= LOGICAS andd LOGICAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(a.equals("true")&&b.equals("true")){ RESULT="true"; } else if(a.equals("true")&&b.equals("false")){ RESULT="true"; } else if(a.equals("false")&&b.equals("true")){ RESULT="false"; } else if(a.equals("false")&&b.equals("false")){ RESULT="false"; }  
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("LOGICAS",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LOGICAS ::= LOGICAS orr LOGICAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(a.equals("true")&&b.equals("true")){ RESULT="false"; } else if(a.equals("true")&&b.equals("false")){ RESULT="true"; } else if(a.equals("false")&&b.equals("true")){ RESULT="true"; } else if(a.equals("false")&&b.equals("false")){ RESULT="false"; }  
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("LOGICAS",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LOGICAS ::= LOGICAS xorr LOGICAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(a.equals("true")&&b.equals("true")){ RESULT="false"; } else if(a.equals("true")&&b.equals("false")){ RESULT="true"; } else if(a.equals("false")&&b.equals("true")){ RESULT="true"; } else if(a.equals("false")&&b.equals("false")){ RESULT="true"; }  
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("LOGICAS",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LOGICAS ::= LOGICAS nott LOGICAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(a.equals("true")&&b.equals("true")){ RESULT="false"; } else if(a.equals("true")&&b.equals("false")){ RESULT="false"; } else if(a.equals("false")&&b.equals("true")){ RESULT="false"; } else if(a.equals("false")&&b.equals("false")){ RESULT="true"; }  
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("LOGICAS",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LOGICAS ::= parenabre LOGICAS parencierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("LOGICAS",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LOGICAS ::= RELACIONAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("LOGICAS",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // RELACIONAL ::= RELACIONAL2 igualigual RELACIONAL2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(Double.compare(aux,auxx)==0){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " == " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " == " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else{
                    if(a.equals(b)){RESULT="true";}else{RESULT="false";}
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RELACIONAL ::= RELACIONAL2 diferenteigual RELACIONAL2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux!=auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " != " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " != " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else{
                    if(!a.equals(b)){RESULT="true";}else{RESULT="false";}
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // RELACIONAL ::= RELACIONAL2 mayorque RELACIONAL2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux>auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " > " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " > " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else{
                    String ca="No se puede hacer esta comparacion: " + a + " > " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // RELACIONAL ::= RELACIONAL2 menorque RELACIONAL2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux<auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " < " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " < " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else{
                    String ca="No se puede hacer esta comparacion: " + a + " < " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // RELACIONAL ::= RELACIONAL2 mayorigual RELACIONAL2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux>=auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " >= " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " >= " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else{
                    String ca="No se puede hacer esta comparacion: " + a + " >= " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // RELACIONAL ::= RELACIONAL2 menorigual RELACIONAL2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que los dos son numericos 
                    Double aux=Double.parseDouble(a);
                    Double auxx=Double.parseDouble(b);
                    if(aux<=auxx){RESULT="true";}else{RESULT="false";}
                }else if(bande1==true && bande2==false){
                    String ca="No se puede hacer esta comparacion: " + a + " <= " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else if(bande1==false && bande2==true){
                    String ca="No se puede hacer esta comparacion: " + a + " <= " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                }else{
                    String ca="No se puede hacer esta comparacion: " + a + " <= " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // RELACIONAL2 ::= NEGATIVO intt 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(b==null){ RESULT=a; }else{ String val=b+a; RESULT=val; } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL2",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // RELACIONAL2 ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 String op= a.substring(1,a.length()-1); RESULT=op; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL2",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // RELACIONAL2 ::= NEGATIVO doublee 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(b==null){ RESULT=a; }else{ String val=b+a; RESULT=val; } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL2",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // RELACIONAL2 ::= caracter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 char b=a.charAt(1); int op=(int)(b); RESULT=String.valueOf(op); 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("RELACIONAL2",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ALGEBRAICA ::= ALGEBRAICA mas ALGEBRAICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==false || bande2==false){ //quiere decir que uno de los dos es string entonces se concatena
                    String op1= a + b;
                    RESULT=op1;
                }else{
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1+op2;
                    RESULT=String.valueOf(op3);
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ALGEBRAICA ::= ALGEBRAICA menos ALGEBRAICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1-op2;
                    RESULT=String.valueOf(op3);
                }else{
                    String ca="No se puede hacer esta resta: " + a + " - " + b;
                    //pila_erroresSemanticos.push(ca);
                    listErroresSemanticos.add(ca);
                    RESULT="0";
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ALGEBRAICA ::= ALGEBRAICA producto ALGEBRAICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1*op2;
                    RESULT=String.valueOf(op3);
                }else{
                    String ca="No se puede hacer este producto: " + a + " * " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                    RESULT="0";
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ALGEBRAICA ::= ALGEBRAICA division ALGEBRAICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1/op2;
                    RESULT=String.valueOf(op3);
                }else{
                    String ca="No se puede hacer esta division: " + a + " / " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                    RESULT="0";
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ALGEBRAICA ::= ALGEBRAICA potencia ALGEBRAICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=Math.pow(op1, op2);
                    RESULT=String.valueOf(op3);
                }else{
                    String ca="No se puede hacer esta potencia: " + a + " pow " + b;
                    listErroresSemanticos.add(ca);
                    //pila_erroresSemanticos.push(ca);
                    RESULT="0";
                } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ALGEBRAICA ::= parenabre ALGEBRAICA parencierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ALGEBRAICA ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 String op= a.substring(1,a.length()-1); RESULT=op; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ALGEBRAICA ::= NEGATIVO intt 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(b==null){ RESULT=a; }else{ String val=b+a; RESULT=val; } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ALGEBRAICA ::= NEGATIVO doublee 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 if(b==null){ RESULT=a; }else{ String val=b+a; RESULT=val; } 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ALGEBRAICA ::= caracter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 char b=a.charAt(1); int op=(int)(b); RESULT=String.valueOf(op); 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ALGEBRAICA ::= booll 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ALGEBRAICA ::= IDARR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 String ca="No se ha encontrado: " + a;
                //pila_erroresSemanticos.push(ca);
                RESULT="0"; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("ALGEBRAICA",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NEGATIVO ::= menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("NEGATIVO",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NEGATIVO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("NEGATIVO",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // IDARR ::= IDARR corchabre ALGEBRAICA corchcierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-1)).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("IDARR",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.elementAt(CUP$analisis_sintactico_UFE_GuardarVariables$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // IDARR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintactico_UFE_GuardarVariables$result = parser.getSymbolFactory().newSymbol("IDARR",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_UFE_GuardarVariables$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_UFE_GuardarVariables$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico_UFE_GuardarVariables$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_UFE_GuardarVariables$do_action(
    int                        CUP$analisis_sintactico_UFE_GuardarVariables$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_UFE_GuardarVariables$parser,
    java.util.Stack            CUP$analisis_sintactico_UFE_GuardarVariables$stack,
    int                        CUP$analisis_sintactico_UFE_GuardarVariables$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico_UFE_GuardarVariables$do_action_part00000000(
                               CUP$analisis_sintactico_UFE_GuardarVariables$act_num,
                               CUP$analisis_sintactico_UFE_GuardarVariables$parser,
                               CUP$analisis_sintactico_UFE_GuardarVariables$stack,
                               CUP$analisis_sintactico_UFE_GuardarVariables$top);
    }
}

}
