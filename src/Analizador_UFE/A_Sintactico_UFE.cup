/*----------------------AREA 1: CODIGO DE USUARIO-------------------------*/

//---------------> importaciones, paquetes
package Analizador_UFE;
import java_cup.runtime.Symbol;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import java.util.ArrayList;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.ImageIcon;
import javax.swing.Icon;
import javax.swing.border.Border;
import javax.swing.BorderFactory;
import java.awt.Color;


//---------------> codigo para el parser, variables, metodos


parser code
{:    
    public String titulo="";
    public String noufe="";
    public static ArrayList<JPanel> misPaneles = new ArrayList<JPanel>();
    public static ArrayList<JLabel> componentesText = new ArrayList<JLabel>();
    public static ArrayList<JTextField> componentesTextfield = new ArrayList<JTextField>();
    public static ArrayList<JButton> componentesbutton = new ArrayList<JButton>();
    public static ArrayList<JComboBox> componentescombobox = new ArrayList<JComboBox>();
    public static ArrayList<JSpinner> componentesspinner = new ArrayList<JSpinner>();
    public static ArrayList<JLabel> componentesimage = new ArrayList<JLabel>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);     
    }
:}

//-------------> Codigo para las acciones gramaticales
action code
{:
:}

/*----------------------AREA 2: DECLARACIONES-------------------------*/

//--------------->declaracion de terminales
terminal parenabre, parencierra, igual, coma, puntoycoma, mas, menos, producto, division, potencia, menorque, mayorque, llaveabre, llavecierra, igualigual, diferenteigual, menorigual, mayorigual, andd, orr, xorr, nott, corchabre, corchcierra;
terminal String variab, booll, id, cadena, renderr, componentt, returnn;
terminal String iduf, equis, ye, heightt, widthh, colorr, borderr, classnamee, panell, textt, textfieldd, buttonn, onclickk, listt, elementss, itemm, defaultt, spinnerr, maxx, minn, imagee, srcc, hexad, nomcolor;
terminal String importt, fromm;
terminal String sii, sinoo, mientrass, repetirr, imprimirr;
terminal String intt;
terminal String doublee;
terminal String caracter;


//--------------->declaracion de no terminales
non terminal String INICIO;
non terminal String ALGEBRAICA, DECLARARVARIABLE, RELACIONAL, RELACIONAL2, LOGICAS, ASIGNARVARIABLE, ASIGNAARREGLO, LISTARREGLO;
non terminal String RENDER, COMPONENTE, TIPCOMPONENT,TIPCOMPONENT2;
non terminal String IDC, EQUISC, YEC, WIDTHC, HEIGHTC, BORDERC, CLASSNAMEC, ONCLICKKK;
non terminal String DENTROCOMPONENTE;
non terminal String IMPORTT;
non terminal Color COLORC;
non terminal JComboBox ITEMMS;
non terminal String MAXS, MINS;
non terminal String SRC;
non terminal String INSIF, INSELSEIFELSE, DENTROIF, DECVARIF;
non terminal String INSMIENTRAS, DENTROMIENTRAS, DECVARMIENTRAS;
non terminal String INSREPETIR, DENTROREPETIR, DECVARREPETIR;
non terminal String IMPRIMIR, IMPRIOP;

precedence left mas, menos;
precedence left producto, division;
precedence right potencia;
precedence left orr;
precedence left andd;
precedence left xorr;
precedence nonassoc mayorque, menorque, mayorigual, menorigual, igualigual, diferenteigual;
precedence right nott;

start with INICIO;

INICIO::= RENDER INICIO
        | COMPONENTE INICIO
        | variab DECLARARVARIABLE puntoycoma INICIO
        | IMPORTT puntoycoma INICIO
        | ASIGNARVARIABLE puntoycoma INICIO
        | ASIGNAARREGLO puntoycoma INICIO
        | INSIF INICIO
        | INSREPETIR INICIO
        | INSMIENTRAS INICIO
        | IMPRIMIR puntoycoma INICIO
        | ;

DECLARARVARIABLE::= DECLARARVARIABLE igual LOGICAS
                 | DECLARARVARIABLE igual ALGEBRAICA
                 | DECLARARVARIABLE corchabre intt corchcierra //para arreglo
                 | DECLARARVARIABLE igual llaveabre LISTARREGLO llavecierra //lista de arreglos
                 | DECLARARVARIABLE coma id
                 | id;

RENDER::= renderr parenabre menorque id division mayorque coma id parencierra puntoycoma ; 

COMPONENTE::= componentt id parenabre parencierra llaveabre DENTROCOMPONENTE llavecierra;

DENTROCOMPONENTE::= returnn parenabre TIPCOMPONENT parencierra puntoycoma DENTROCOMPONENTE
                | variab DECLARARVARIABLE puntoycoma DENTROCOMPONENTE
                | IMPORTT puntoycoma DENTROCOMPONENTE
                | ASIGNARVARIABLE puntoycoma DENTROCOMPONENTE
                | ASIGNAARREGLO puntoycoma DENTROCOMPONENTE
                | INSIF DENTROCOMPONENTE
                | INSREPETIR DENTROCOMPONENTE
                | INSMIENTRAS DENTROCOMPONENTE
                | IMPRIMIR puntoycoma DENTROCOMPONENTE
                |;
               
                 //empieza la estructura de un Panel (El que contendra todo)
TIPCOMPONENT::= menorque panell IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque TIPCOMPONENT2
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    JPanel nuevo=new JPanel(); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setLayout(null);
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    for (int i = 0; i < componentesText.size(); i++){ nuevo.add(componentesText.get(i)); } 
                    for (int i = 0; i < componentesTextfield.size(); i++){ nuevo.add(componentesTextfield.get(i)); } 
                    for (int i = 0; i < componentesbutton.size(); i++){ nuevo.add(componentesbutton.get(i)); } 
                    for (int i = 0; i < componentescombobox.size(); i++){ nuevo.add(componentescombobox.get(i)); }
                    for (int i = 0; i < componentesspinner.size(); i++){ nuevo.add(componentesspinner.get(i)); } 
                    for (int i = 0; i < componentesimage.size(); i++){ nuevo.add(componentesimage.get(i)); }                      
                    misPaneles.add(nuevo);
                    componentesText.clear();
                    componentesTextfield.clear();
                    componentesbutton.clear();
                    componentescombobox.clear();
                    componentesspinner.clear();
                    componentesimage.clear();  :}

              | menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque division panell mayorque //por si no vienen mas panel adentro 
              | menorque textt IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque llaveabre id llavecierra menorque division textt mayorque
              | menorque textfieldd IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque llaveabre id llavecierra menorque division textfieldd mayorque
              | menorque listt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque menorque elementss mayorque ITEMMS:jcb menorque division elementss mayorque menorque defaultt mayorque intt:def menorque division defaultt mayorque menorque division listt mayorque  
              | menorque spinnerr IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g ONCLICKKK:h CLASSNAMEC:j MAXS:k MINS:l mayorque intt:i menorque division spinnerr mayorque 
              | menorque imagee IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h SRC:i mayorque
              | menorque division id mayorque ; 

TIPCOMPONENT2::= TIPCOMPONENT2 menorque division panell mayorque //para cerrar el panel principal

                | TIPCOMPONENT2 menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque division panell mayorque //termina con panel
                
                | TIPCOMPONENT2 menorque textt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque llaveabre id:i llavecierra menorque division textt mayorque //termina con text
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}                
                    JLabel nuevo=new JLabel(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    componentesText.add(nuevo); :} 

                | TIPCOMPONENT2 menorque textfieldd IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque llaveabre id:i llavecierra menorque division textfieldd mayorque
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";} 
                    JTextField nuevo=new JTextField(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    componentesTextfield.add(nuevo); :}

                | TIPCOMPONENT2 menorque buttonn IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g ONCLICKKK:h CLASSNAMEC:j mayorque llaveabre id:i llavecierra menorque division buttonn mayorque 
                {: if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    JButton nuevo=new JButton(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    nuevo.addActionListener(new ActionListener() { @Override
                    public void actionPerformed(java.awt.event.ActionEvent e) { JOptionPane.showMessageDialog(null, h); }});
                    componentesbutton.add(nuevo);  :}

                | TIPCOMPONENT2 menorque listt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque menorque elementss mayorque ITEMMS:jcb menorque division elementss mayorque menorque defaultt mayorque intt:def menorque division defaultt mayorque menorque division listt mayorque 
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    jcb.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); jcb.setSelectedIndex(Integer.parseInt(def)); 
                    jcb.setBackground(f);
                    jcb.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    jcb.setBorder(borderr);
                    componentescombobox.add(jcb);  :}    

                | TIPCOMPONENT2 menorque spinnerr IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:j MAXS:k MINS:l mayorque intt:i menorque division spinnerr mayorque 
                {:  
                    if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(g==null){g="0";}
                    SpinnerModel sm = new SpinnerNumberModel(Integer.parseInt(i), Integer.parseInt(l), Integer.parseInt(k), 1);
                   JSpinner spi=new JSpinner(sm);
                   spi.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d));
                   Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    spi.setBorder(borderr);
                   componentesspinner.add(spi);   :}

                | TIPCOMPONENT2 menorque imagee IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h SRC:i mayorque 
                {:  i=i.substring(1,i.length()-1);
                    JLabel jlimg=new JLabel();        
                    jlimg.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d));
                    ImageIcon imgi=new ImageIcon(i);
                    Icon icono=new ImageIcon(imgi.getImage().getScaledInstance(jlimg.getWidth(), jlimg.getHeight(), 0));
                    jlimg.setIcon(icono);
                    componentesimage.add(jlimg); :}

                | TIPCOMPONENT2 menorque division id mayorque

                | menorque panell IDC EQUISC YEC HEIGHTC WIDTHC COLORC BORDERC CLASSNAMEC mayorque menorque division panell mayorque //empezara con un panel
                
                //text (jlabel)
                | menorque textt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque llaveabre id:i llavecierra menorque division textt mayorque
                    {: if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}                
                    JLabel nuevo=new JLabel(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    componentesText.add(nuevo); :} 
                
                //textfield
                | menorque textfieldd IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque llaveabre id:i llavecierra menorque division textfieldd mayorque 
                {: if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";} 
                    JTextField nuevo=new JTextField(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    componentesTextfield.add(nuevo); :}

                | menorque buttonn IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g ONCLICKKK:h CLASSNAMEC:j mayorque llaveabre id:i llavecierra menorque division buttonn mayorque  
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    JButton nuevo=new JButton(i); 
                    nuevo.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); 
                    nuevo.setBackground(f);
                    nuevo.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    nuevo.setBorder(borderr);
                    nuevo.addActionListener(new ActionListener() { @Override
                    public void actionPerformed(java.awt.event.ActionEvent e) { JOptionPane.showMessageDialog(null, h); }});
                    componentesbutton.add(nuevo); :} 

                | menorque listt IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h mayorque menorque elementss mayorque ITEMMS:jcb menorque division elementss mayorque menorque defaultt mayorque intt:def menorque division defaultt mayorque menorque division listt mayorque 
                {: if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(f==null){f=Color.white;} if(g==null){g="0";}
                    jcb.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d)); jcb.setSelectedIndex(Integer.parseInt(def)); 
                    jcb.setBackground(f);
                    jcb.setOpaque(true);
                    Border borderr = BorderFactory.createLineBorder(Color.BLACK, Integer.parseInt(g)); 
                    jcb.setBorder(borderr);
                    componentescombobox.add(jcb);   :} 

                | menorque spinnerr IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:j MAXS:k MINS:l mayorque intt:i menorque division spinnerr mayorque 
                {:  if(b==null){b="0";} if(c==null){c="0";} if(d==null){d="100";} if(e==null){e="100";} if(g==null){g="0";}
                    SpinnerModel sm = new SpinnerNumberModel(Integer.parseInt(i), Integer.parseInt(l), Integer.parseInt(k), 1);
                   JSpinner spi=new JSpinner(sm);
                   spi.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d));
                   Border borderr = BorderFactory.createLineBorder(Color.black, 5); 
                    spi.setBorder(borderr);
                   componentesspinner.add(spi);    :}

                | menorque imagee IDC:a EQUISC:b YEC:c HEIGHTC:d WIDTHC:e COLORC:f BORDERC:g CLASSNAMEC:h SRC:i mayorque 
                {:                 
                     i=i.substring(1,i.length()-1);
                    JLabel jlimg=new JLabel();     
                    jlimg.setBounds(Integer.parseInt(b), Integer.parseInt(c), Integer.parseInt(e), Integer.parseInt(d));
                    ImageIcon imgi=new ImageIcon(i);
                    Icon icono=new ImageIcon(imgi.getImage().getScaledInstance(jlimg.getWidth(), jlimg.getHeight(), 0));
                    jlimg.setIcon(icono);
                    componentesimage.add(jlimg); :}  
                    
                | menorque division id mayorque;
                
 
ITEMMS::= ITEMMS:jcb menorque itemm mayorque llaveabre id:a llavecierra menorque division itemm mayorque
         {: jcb.addItem(a); RESULT=jcb; :}
        | menorque itemm mayorque llaveabre id:a llavecierra menorque division itemm mayorque
        {: JComboBox nuevo= new JComboBox(); nuevo.addItem(a); RESULT=nuevo; :};

IDC::= iduf igual id
       | ;

EQUISC::= equis igual intt:a {: RESULT=a; :}
       | ;

YEC::= ye igual intt:a {: RESULT=a; :}
       | ;

WIDTHC::= widthh igual intt:a {: RESULT=a; :}
        | ;

HEIGHTC::= heightt igual intt:a {: RESULT=a; :}
        | ;

COLORC::= colorr igual nomcolor:a {: if(a.substring(1,a.length()-1).toLowerCase().equals("red")){ Color c=Color.RED; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("pink")){ Color c=Color.PINK; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("orange")){ Color c=Color.ORANGE; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("yellow")){ Color c=Color.yellow; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("purple")){ Color c=Color.magenta;  RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("magenta")){ Color c=Color.MAGENTA; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("green")){ Color c=Color.GREEN; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("blue")){ Color c=Color.BLUE; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("brown")){ Color c=Color.yellow; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("white")){ Color c=Color.white; RESULT=c; } 
           else if(a.substring(1,a.length()-1).toLowerCase().equals("gray")){ Color c=Color.gray; RESULT=c; } else if(a.substring(1,a.length()-1).toLowerCase().equals("black")){ Color c=Color.BLACK; RESULT=c; } :}
        | colorr igual hexad:a {: Color c= Color.decode(a); RESULT=c; :}
        | ;

BORDERC::= borderr igual intt:a {: RESULT=a; :}
        | ;

CLASSNAMEC::= classnamee igual cadena
        | ;

ONCLICKKK::= onclickk igual llaveabre id:a llavecierra {: RESULT=a;  :}
        | ;

MAXS::= maxx igual intt:a  {: RESULT=a;  :}
        | ;

MINS::= minn igual intt:a  {: RESULT=a;  :}
        | ;

SRC::= srcc igual cadena:a {: RESULT=a; :} ;

IMPORTT::= importt cadena
        | importt id fromm cadena;


//INSTRUCCION IF
INSIF::= sii parenabre LOGICAS parencierra llaveabre DENTROIF llavecierra INSELSEIFELSE;

INSELSEIFELSE::= sinoo sii parenabre LOGICAS parencierra llaveabre DENTROIF llavecierra INSELSEIFELSE
                | sinoo llaveabre DENTROIF llavecierra INSELSEIFELSE
                |;

DENTROIF::= variab DECVARIF puntoycoma
            | ;

DECVARIF::= DECVARIF igual LOGICAS
            | DECVARIF igual ALGEBRAICA
            | DECVARIF corchabre intt corchcierra //para arreglo
            | DECVARIF igual llaveabre LISTARREGLO llavecierra //lista de arreglos
            | DECVARIF coma id
            | id;

//INSTRUCCION REPETIR
INSREPETIR::= repetirr parenabre ALGEBRAICA parencierra llaveabre DENTROREPETIR llavecierra;

DENTROREPETIR::= variab DECVARREPETIR puntoycoma
                | ;

DECVARREPETIR::= DECVARREPETIR igual LOGICAS
            | DECVARREPETIR igual ALGEBRAICA
            | DECVARREPETIR corchabre intt corchcierra //para arreglo
            | DECVARREPETIR igual llaveabre LISTARREGLO llavecierra //lista de arreglos
            | DECVARREPETIR coma id
            | id;


//INSTRUCCION MIENTRAS
INSMIENTRAS::= mientrass parenabre LOGICAS parencierra llaveabre DENTROMIENTRAS llavecierra;

DENTROMIENTRAS::= variab DECVARMIENTRAS puntoycoma
                | ;

DECVARMIENTRAS::= DECVARMIENTRAS igual LOGICAS
            | DECVARMIENTRAS igual ALGEBRAICA
            | DECVARMIENTRAS corchabre intt corchcierra //para arreglo
            | DECVARMIENTRAS igual llaveabre LISTARREGLO llavecierra //lista de arreglos
            | DECVARMIENTRAS coma id
            | id;

//PARA LISTA DE ARREGLOS
LISTARREGLO::= LISTARREGLO coma ALGEBRAICA
            | ALGEBRAICA;

//ASIGNAR VALOR A VARIABLE
ASIGNARVARIABLE::= id igual ALGEBRAICA;

//ASIGNAR VALOR A UN ARREGLO
ASIGNAARREGLO::= id corchabre intt corchcierra igual ALGEBRAICA;

//IMPRIMIR
IMPRIMIR::= imprimirr parenabre IMPRIOP parencierra;

IMPRIOP::= ALGEBRAICA
        | LOGICAS;

LOGICAS::= LOGICAS andd LOGICAS
        | LOGICAS orr LOGICAS
        | LOGICAS xorr LOGICAS
        | LOGICAS nott LOGICAS
        | parenabre LOGICAS parencierra
        | RELACIONAL;

RELACIONAL::=RELACIONAL2:a igualigual RELACIONAL2:b
            {: Double aux=Double.parseDouble(a);
               Double auxx=Double.parseDouble(b);
               if(aux==auxx){RESULT="true";}else{RESULT="false";} :}
            | RELACIONAL2:a diferenteigual RELACIONAL2:b
            {: Double aux=Double.parseDouble(a);
               Double auxx=Double.parseDouble(b);
               if(aux!=auxx){RESULT="true";}else{RESULT="false";} :} 
            | RELACIONAL2:a mayorque RELACIONAL2:b 
            {: Double aux=Double.parseDouble(a);
               Double auxx=Double.parseDouble(b);
               if(aux>auxx){RESULT="true";}else{RESULT="false";} :}
            | RELACIONAL2:a menorque RELACIONAL2:b 
            {: Double aux=Double.parseDouble(a);
               Double auxx=Double.parseDouble(b);
               if(aux<auxx){RESULT="true";}else{RESULT="false";} :}
            | RELACIONAL2:a mayorigual RELACIONAL2:b
            {: Double aux=Double.parseDouble(a);
               Double auxx=Double.parseDouble(b);
               if(aux>=auxx){RESULT="true";}else{RESULT="false";} :}
            | RELACIONAL2:a menorigual RELACIONAL2:b
            {: Double aux=Double.parseDouble(a);
               Double auxx=Double.parseDouble(b);
               if(aux<=auxx){RESULT="true";}else{RESULT="false";} :};

RELACIONAL2::=intt:a {: RESULT=a; :}
            | cadena:a {: String op= a.substring(1,a.length()-1); RESULT=op; :}
            | doublee:a {: RESULT=a; :}
            | caracter:a {: char b=a.charAt(1); int op=(int)(b); RESULT=String.valueOf(op); :} ;



ALGEBRAICA::= ALGEBRAICA:a mas ALGEBRAICA:b

            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==false || bande2==false){ //quiere decir que uno de los dos es string entonces se concatena
                    String op1= a + b;
                    RESULT=op1;
                }else{
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1+op2;
                    RESULT=String.valueOf(op3);
                } :}    

            | ALGEBRAICA:a menos ALGEBRAICA:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1-op2;
                    RESULT=String.valueOf(op3);
                }else{
                    System.out.println("ERROR AL RESTAR");
                    RESULT="";
                } :} 

            | ALGEBRAICA:a producto ALGEBRAICA:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1*op2;
                    RESULT=String.valueOf(op3);
                }else{
                    System.out.println("ERROR AL MULTIPLICAR");
                    RESULT="";
                } :} 

            | ALGEBRAICA:a division ALGEBRAICA:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=op1/op2;
                    RESULT=String.valueOf(op3);
                }else{
                    System.out.println("ERROR AL DIVIDIR");
                    RESULT="";
                } :} 

            | ALGEBRAICA:a potencia ALGEBRAICA:b
            {: boolean bande1=false; 
               boolean bande2=false;
               try{ 
                    Double aux=Double.parseDouble(a); //si lo convierte es num o double
                    bande1=true;
               }catch(Exception e){} 
               try{ Double aux=Double.parseDouble(b); //si lo convierte es num o double
                    bande2=true;
               }catch(Exception e){} 
               if(bande1==true && bande2==true){ //quiere decir que uno de los dos es string entonces se concatena
                    Double op1=Double.parseDouble(a);
                    Double op2=Double.parseDouble(b);
                    Double op3=Math.pow(op1, op2);
                    RESULT=String.valueOf(op3);
                }else{
                    System.out.println("ERROR EN POTENCIA");
                    RESULT="";
                } :} 

            | parenabre ALGEBRAICA:a parencierra
              {: RESULT=a; :}
            | cadena:a
              {: String op= a.substring(1,a.length()-1); RESULT=op; :} //para quitar comillas
            | intt:a
              {: RESULT=a; :}
            | doublee:a
              {: RESULT=a; :}
            | caracter:a
              {: char b=a.charAt(1); int op=(int)(b); RESULT=String.valueOf(op); :}
            | booll:a
              {: RESULT=a; :};
