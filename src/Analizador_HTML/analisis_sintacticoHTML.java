
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador_HTML;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintacticoHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosHTML.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintacticoHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintacticoHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintacticoHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\004\000\002\005\006\000\002\002" +
    "\006\000\002\003\022\000\002\004\013\000\002\004\015" +
    "\000\002\004\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\004\013\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\014\010\001\002\000\004\013\012\001\002\000" +
    "\004\002\000\001\002\000\004\006\013\001\002\000\004" +
    "\014\014\001\002\000\004\013\016\001\002\000\004\002" +
    "\uffff\001\002\000\004\007\017\001\002\000\004\014\020" +
    "\001\002\000\004\017\021\001\002\000\004\013\022\001" +
    "\002\000\004\015\023\001\002\000\004\007\024\001\002" +
    "\000\004\014\025\001\002\000\004\013\026\001\002\000" +
    "\004\015\027\001\002\000\004\006\030\001\002\000\004" +
    "\014\031\001\002\000\004\013\032\001\002\000\004\005" +
    "\033\001\002\000\004\014\034\001\002\000\004\013\035" +
    "\001\002\000\010\010\037\011\041\015\040\001\002\000" +
    "\004\002\ufffe\001\002\000\004\014\061\001\002\000\004" +
    "\005\053\001\002\000\004\012\042\001\002\000\004\016" +
    "\043\001\002\000\004\017\044\001\002\000\004\014\045" +
    "\001\002\000\004\013\046\001\002\000\004\015\047\001" +
    "\002\000\004\011\050\001\002\000\004\014\051\001\002" +
    "\000\004\013\035\001\002\000\004\002\ufffc\001\002\000" +
    "\004\014\054\001\002\000\004\013\055\001\002\000\004" +
    "\015\056\001\002\000\004\004\057\001\002\000\004\014" +
    "\060\001\002\000\004\002\ufffb\001\002\000\004\017\062" +
    "\001\002\000\004\013\063\001\002\000\004\015\064\001" +
    "\002\000\004\010\065\001\002\000\004\014\066\001\002" +
    "\000\004\013\035\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\004\005\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\066\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintacticoHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintacticoHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintacticoHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    

    public String titulo="";
    public String noufe="";
    public static ArrayList<String> misIDShtml = new ArrayList<String>();

    //para guardar los errores sintacticos
    public static Object [] encabezado={"","",""};
    public static DefaultTableModel tablaerroresSintacticosHTML=new DefaultTableModel(encabezado,0);

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        Object[] cars = {lexema, fila, columna};
        tablaerroresSintacticosHTML.addRow(cars);
        /*System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);*/

        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        /*System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);*/

     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintacticoHTML$actions {



  private final analisis_sintacticoHTML parser;

  /** Constructor */
  CUP$analisis_sintacticoHTML$actions(analisis_sintacticoHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintacticoHTML$do_action_part00000000(
    int                        CUP$analisis_sintacticoHTML$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintacticoHTML$parser,
    java.util.Stack            CUP$analisis_sintacticoHTML$stack,
    int                        CUP$analisis_sintacticoHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintacticoHTML$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintacticoHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintacticoHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintacticoHTML$parser.done_parsing();
          return CUP$analisis_sintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= menor ghtml mayor CABEZA 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoHTML$stack.peek()).value;
		 titulo=tit; 
              CUP$analisis_sintacticoHTML$result = parser.getSymbolFactory().newSymbol("INICIO",3, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CABEZA ::= menor ghead mayor TITULO 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()).left;
		int titright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoHTML$stack.peek()).value;
		 RESULT = tit; 
              CUP$analisis_sintacticoHTML$result = parser.getSymbolFactory().newSymbol("CABEZA",0, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TITULO ::= menor gtitle mayor cadena menor diagonal gtitle mayor menor diagonal ghead mayor menor gbody mayor NOUFDIV 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-12)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-12)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-12)).value;
		int noufeeleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()).left;
		int noufeeright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()).right;
		String noufee = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoHTML$stack.peek()).value;
		 noufe=noufee;  RESULT = tit;
              CUP$analisis_sintacticoHTML$result = parser.getSymbolFactory().newSymbol("TITULO",1, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NOUFDIV ::= menor gnoufe mayor cadena menor diagonal gnoufe mayor NOUFDIV 
            {
              String RESULT =null;
		int noufeeleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-5)).left;
		int noufeeright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-5)).right;
		String noufee = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-5)).value;
		 RESULT=noufee; 
              CUP$analisis_sintacticoHTML$result = parser.getSymbolFactory().newSymbol("NOUFDIV",2, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NOUFDIV ::= menor gdiv gid igual cadena mayor menor diagonal gdiv mayor NOUFDIV 
            {
              String RESULT =null;
		int divvleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-6)).left;
		int divvright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-6)).right;
		String divv = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-6)).value;
		 String op= divv.substring(1,divv.length()-1); misIDShtml.add(op); 
              CUP$analisis_sintacticoHTML$result = parser.getSymbolFactory().newSymbol("NOUFDIV",2, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NOUFDIV ::= menor diagonal gbody mayor menor diagonal ghtml mayor 
            {
              String RESULT =null;

              CUP$analisis_sintacticoHTML$result = parser.getSymbolFactory().newSymbol("NOUFDIV",2, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.elementAt(CUP$analisis_sintacticoHTML$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintacticoHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintacticoHTML$do_action(
    int                        CUP$analisis_sintacticoHTML$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintacticoHTML$parser,
    java.util.Stack            CUP$analisis_sintacticoHTML$stack,
    int                        CUP$analisis_sintacticoHTML$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintacticoHTML$do_action_part00000000(
                               CUP$analisis_sintacticoHTML$act_num,
                               CUP$analisis_sintacticoHTML$parser,
                               CUP$analisis_sintacticoHTML$stack,
                               CUP$analisis_sintacticoHTML$top);
    }
}

}
