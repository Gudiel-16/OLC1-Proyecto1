
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador_CSS;

import java_cup.runtime.Symbol;
import java.awt.Color;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import java.util.ArrayList;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.ImageIcon;
import javax.swing.Icon;
import javax.swing.border.Border;
import javax.swing.BorderFactory;
import java.awt.Font;
import javax.swing.table.DefaultTableModel;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintacticoCSS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosCSS.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintacticoCSS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintacticoCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintacticoCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\003" +
    "\020\000\002\003\021\000\002\003\002\000\002\023\005" +
    "\000\002\023\002\000\002\013\005\000\002\013\002\000" +
    "\002\024\005\000\002\024\002\000\002\014\005\000\002" +
    "\014\002\000\002\015\005\000\002\015\002\000\002\016" +
    "\005\000\002\016\002\000\002\017\005\000\002\017\002" +
    "\000\002\025\005\000\002\025\002\000\002\020\005\000" +
    "\002\020\002\000\002\021\005\000\002\021\002\000\002" +
    "\022\004\000\002\022\004\000\002\022\013\000\002\004" +
    "\004\000\002\005\004\000\002\006\004\000\002\007\004" +
    "\000\002\010\004\000\002\011\004\000\002\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\010\002\ufffd\013\004\033\007\001\002\000" +
    "\004\033\117\001\002\000\004\002\000\001\002\000\004" +
    "\002\116\001\002\000\004\004\010\001\002\000\030\005" +
    "\ufffb\014\012\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\001\002\000\026\005" +
    "\ufff9\015\032\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\001\002\000\004\011\013\001" +
    "\002\000\010\026\016\031\015\034\014\001\002\000\004" +
    "\012\031\001\002\000\004\012\030\001\002\000\004\006" +
    "\020\001\002\000\026\005\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\001" +
    "\002\000\004\032\021\001\002\000\004\010\022\001\002" +
    "\000\004\032\023\001\002\000\004\010\024\001\002\000" +
    "\004\032\025\001\002\000\004\007\026\001\002\000\004" +
    "\012\027\001\002\000\026\005\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\001\002\000\026\005\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\001\002" +
    "\000\026\005\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\001\002\000\004" +
    "\011\112\001\002\000\024\005\ufff7\016\034\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\001\002" +
    "\000\004\011\110\001\002\000\022\005\ufff5\017\037\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\001\002" +
    "\000\020\005\ufff3\020\045\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\001\002\000\004\011\040\001\002\000\004" +
    "\032\042\001\002\000\020\005\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\001\002\000\004\012\043" +
    "\001\002\000\020\005\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\001\002\000\016\005\ufff1\021\053" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\001\002\000\004\011" +
    "\046\001\002\000\004\027\050\001\002\000\016\005\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\001\002\000" +
    "\004\012\051\001\002\000\016\005\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\001\002\000\014\005\uffef\022" +
    "\060\023\uffef\024\uffef\025\uffef\001\002\000\004\011\054" +
    "\001\002\000\004\035\056\001\002\000\014\005\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\001\002\000\004\012\057" +
    "\001\002\000\014\005\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\001\002\000\004\011\104\001\002\000\012\005\uffed" +
    "\023\062\024\uffed\025\uffed\001\002\000\004\011\102\001" +
    "\002\000\010\005\uffeb\024\064\025\uffeb\001\002\000\004" +
    "\011\076\001\002\000\006\005\uffe9\025\066\001\002\000" +
    "\004\011\072\001\002\000\004\005\070\001\002\000\010" +
    "\002\ufffd\013\004\033\007\001\002\000\004\002\uffff\001" +
    "\002\000\004\032\073\001\002\000\004\012\075\001\002" +
    "\000\004\005\uffea\001\002\000\004\005\uffdf\001\002\000" +
    "\004\032\100\001\002\000\006\005\uffec\025\uffec\001\002" +
    "\000\004\012\101\001\002\000\006\005\uffe0\025\uffe0\001" +
    "\002\000\010\026\016\031\015\034\014\001\002\000\010" +
    "\005\uffee\024\uffee\025\uffee\001\002\000\004\032\106\001" +
    "\002\000\012\005\ufff0\023\ufff0\024\ufff0\025\ufff0\001\002" +
    "\000\004\012\107\001\002\000\012\005\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\001\002\000\010\026\016\031\015\034\014" +
    "\001\002\000\022\005\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\001\002\000\004\030\113" +
    "\001\002\000\004\012\115\001\002\000\024\005\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\001\002\000\024\005\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\001\002" +
    "\000\004\002\001\001\002\000\004\004\120\001\002\000" +
    "\030\005\ufffb\014\012\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\001\002\000" +
    "\026\005\ufff9\015\032\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\001\002\000\024\005" +
    "\ufff7\016\034\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\001\002\000\022\005\ufff5\017\037\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\001\002" +
    "\000\020\005\ufff3\020\045\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\001\002\000\016\005\ufff1\021\053\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\001\002\000\014\005\uffef\022" +
    "\060\023\uffef\024\uffef\025\uffef\001\002\000\012\005\uffed" +
    "\023\062\024\uffed\025\uffed\001\002\000\010\005\uffeb\024" +
    "\064\025\uffeb\001\002\000\006\005\uffe9\025\066\001\002" +
    "\000\004\005\133\001\002\000\010\002\ufffd\013\004\033" +
    "\007\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\010\001\001\000\004\013\032\001\001\000" +
    "\002\001\001\000\004\022\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\034\001\001\000\002\001" +
    "\001\000\004\014\035\001\001\000\004\015\043\001\001" +
    "\000\002\001\001\000\004\005\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\051" +
    "\001\001\000\002\001\001\000\004\006\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\060\001\001\000\002\001\001\000\004\007\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\062\001\001\000\002\001" +
    "\001\000\004\020\064\001\001\000\002\001\001\000\004" +
    "\021\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\070\001\001\000\002\001\001\000\004\012\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\102\001\001\000" +
    "\002\001\001\000\004\010\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\110\001" +
    "\001\000\002\001\001\000\004\004\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\120\001\001\000\004" +
    "\013\121\001\001\000\004\024\122\001\001\000\004\014" +
    "\123\001\001\000\004\015\124\001\001\000\004\016\125" +
    "\001\001\000\004\017\126\001\001\000\004\025\127\001" +
    "\001\000\004\020\130\001\001\000\004\021\131\001\001" +
    "\000\002\001\001\000\004\003\133\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintacticoCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintacticoCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintacticoCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    

    public static ArrayList<Object> listCualquierComponent = new ArrayList<Object>();
    public static ArrayList<String> listCualquierComponentNameclass = new ArrayList<String>();

    //para guardar los errores sintacticos
    public static Object [] encabezado={"","",""};
    public static DefaultTableModel tablaerroresSintacticosCSS=new DefaultTableModel(encabezado,0);

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        Object[] cars = {lexema, fila, columna};
        tablaerroresSintacticosCSS.addRow(cars);

        /*System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna); */       
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        /*System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);*/
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintacticoCSS$actions {



  private final analisis_sintacticoCSS parser;

  /** Constructor */
  CUP$analisis_sintacticoCSS$actions(analisis_sintacticoCSS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintacticoCSS$do_action_part00000000(
    int                        CUP$analisis_sintacticoCSS$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintacticoCSS$parser,
    java.util.Stack            CUP$analisis_sintacticoCSS$stack,
    int                        CUP$analisis_sintacticoCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintacticoCSS$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintacticoCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintacticoCSS$parser.done_parsing();
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SELECTOR 
            {
              Object RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SELECTOR ::= id llaveabre FONDO BORDE BORDECOLOR BORDGROSOR ALINEACION FUENTE TAMFUENTE COLFUENTE ALTO ANCHO llavecierra SELECTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-11)).right;
		Color b = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-10)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-9)).right;
		Color d = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-7)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-6)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-6)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-4)).right;
		Color i = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-3)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-3)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)).value;
		 for (int m = 0; m < listCualquierComponentNameclass.size(); m++) 
            {
              if(a.equals(listCualquierComponentNameclass.get(m)))
              {
                  try{
                        JPanel nuevoo=(JPanel)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        //if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);                        
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
                  try{
                        JLabel nuevoo=(JLabel)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);

                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
                  try{
                        JTextField nuevoo=(JTextField)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/ }
                  try{
                        JButton nuevoo=(JButton)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
                  try{
                        JComboBox nuevoo=(JComboBox)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        //if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
                  try{
                        JSpinner nuevoo=(JSpinner)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        //if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
              }
            } 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("SELECTOR",1, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-13)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SELECTOR ::= punto id llaveabre FONDO BORDE BORDECOLOR BORDGROSOR ALINEACION FUENTE TAMFUENTE COLFUENTE ALTO ANCHO llavecierra SELECTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-11)).right;
		Color b = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-10)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-9)).right;
		Color d = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-7)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-6)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-6)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-4)).right;
		Color i = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-3)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-3)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)).value;
		 for (int m = 0; m < listCualquierComponentNameclass.size(); m++) 
            {
              if(a.equals(listCualquierComponentNameclass.get(m)))
              {
                  try{
                        JPanel nuevoo=(JPanel)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        //if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);                        
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
                  try{
                        JLabel nuevoo=(JLabel)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);

                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
                  try{
                        JTextField nuevoo=(JTextField)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/ }
                  try{
                        JButton nuevoo=(JButton)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
                  try{
                        JComboBox nuevoo=(JComboBox)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        //if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
                  try{
                        JSpinner nuevoo=(JSpinner)listCualquierComponent.get(m);
                        if(b!=null){nuevoo.setBackground(b); nuevoo.setOpaque(true);}
                        if(c!=null && d!=null && e!=null){ if(c.equals("true")){ Border borderr = BorderFactory.createLineBorder(d, Integer.parseInt(e)); nuevoo.setBorder(borderr); } }
                        //if(f!=null){ if(f.toLowerCase().equals("left")){ nuevoo.setHorizontalAlignment(nuevoo.LEFT); } else if(f.toLowerCase().equals("right")){ nuevoo.setHorizontalAlignment(nuevoo.RIGHT); } else if(f.toLowerCase().equals("center")){ nuevoo.setHorizontalAlignment(nuevoo.CENTER); } }
                        if(g!=null && h!=null){ Font font = new Font(g, Font.PLAIN, Integer.parseInt(h)); nuevoo.setFont(font); }
                        if(i!=null){ nuevoo.setForeground(i); }
                        if(j!=null && k!=null){ nuevoo.setSize(Integer.parseInt(k),Integer.parseInt(j)); }
                        listCualquierComponent.remove(m);
                        listCualquierComponent.add(m,nuevoo);
                        
                  }catch(Exception n){ /*System.out.println("error"+n);*/  }
              }
            } 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("SELECTOR",1, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SELECTOR ::= 
            {
              Object RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("SELECTOR",1, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FONDO ::= backgroundd dospuntos VALOR1 
            {
              Color RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		Color a = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("FONDO",17, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FONDO ::= 
            {
              Color RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("FONDO",17, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BORDE ::= boorder dospuntos VALOR2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("BORDE",9, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BORDE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("BORDE",9, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BORDECOLOR ::= bcolor dospuntos VALOR1 
            {
              Color RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		Color a = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("BORDECOLOR",18, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BORDECOLOR ::= 
            {
              Color RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("BORDECOLOR",18, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BORDGROSOR ::= bwidth dospuntos VALOR4 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("BORDGROSOR",10, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BORDGROSOR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("BORDGROSOR",10, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ALINEACION ::= aligndecla dospuntos VALOR5 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("ALINEACION",11, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ALINEACION ::= 
            {
              String RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("ALINEACION",11, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUENTE ::= fontt dospuntos VALOR6 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("FUENTE",12, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUENTE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("FUENTE",12, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TAMFUENTE ::= fsize dospuntos VALOR7 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("TAMFUENTE",13, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TAMFUENTE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("TAMFUENTE",13, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COLFUENTE ::= fcolor dospuntos VALOR1 
            {
              Color RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		Color a = (Color)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("COLFUENTE",19, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COLFUENTE ::= 
            {
              Color RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("COLFUENTE",19, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ALTO ::= hightt dospuntos VALOR9 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("ALTO",14, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ALTO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("ALTO",14, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ANCHO ::= widthh dospuntos VALOR10 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.peek()).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("ANCHO",15, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ANCHO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("ANCHO",15, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR1 ::= hexad puntoycoma 
            {
              Color RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		 Color c= Color.decode(a); RESULT=c; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR1",16, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR1 ::= nomcolor puntoycoma 
            {
              Color RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		 if(a.toLowerCase().equals("red")){ Color c=Color.RED; RESULT=c; } else if(a.toLowerCase().equals("pink")){ Color c=Color.PINK; RESULT=c; } 
           else if(a.toLowerCase().equals("orange")){ Color c=Color.ORANGE; RESULT=c; } else if(a.toLowerCase().equals("yellow")){ Color c=Color.yellow; RESULT=c; } 
           else if(a.toLowerCase().equals("purple")){ Color c=Color.magenta;  RESULT=c; } else if(a.toLowerCase().equals("magenta")){ Color c=Color.MAGENTA; RESULT=c; } 
           else if(a.toLowerCase().equals("green")){ Color c=Color.GREEN; RESULT=c; } else if(a.toLowerCase().equals("blue")){ Color c=Color.BLUE; RESULT=c; } 
           else if(a.toLowerCase().equals("brown")){ Color c=Color.yellow; RESULT=c; } else if(a.toLowerCase().equals("white")){ Color c=Color.white; RESULT=c; } 
           else if(a.toLowerCase().equals("gray")){ Color c=Color.gray; RESULT=c; } else if(a.toLowerCase().equals("black")){ Color c=Color.BLACK; RESULT=c; } 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR1",16, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR1 ::= rgbb parenabre intt coma intt coma intt parencierra puntoycoma 
            {
              Color RESULT =null;

              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR1",16, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR2 ::= booll puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR2",2, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR4 ::= intt puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR4",3, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR5 ::= alineam puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR5",4, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR6 ::= fuent puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		 String op= a.substring(1,a.length()-1); RESULT=op; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR6",5, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR7 ::= intt puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR7",6, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR9 ::= intt puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR9",7, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR10 ::= intt puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)).value;
		 RESULT=a; 
              CUP$analisis_sintacticoCSS$result = parser.getSymbolFactory().newSymbol("VALOR10",8, ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.elementAt(CUP$analisis_sintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$analisis_sintacticoCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintacticoCSS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintacticoCSS$do_action(
    int                        CUP$analisis_sintacticoCSS$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintacticoCSS$parser,
    java.util.Stack            CUP$analisis_sintacticoCSS$stack,
    int                        CUP$analisis_sintacticoCSS$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintacticoCSS$do_action_part00000000(
                               CUP$analisis_sintacticoCSS$act_num,
                               CUP$analisis_sintacticoCSS$parser,
                               CUP$analisis_sintacticoCSS$stack,
                               CUP$analisis_sintacticoCSS$top);
    }
}

}
